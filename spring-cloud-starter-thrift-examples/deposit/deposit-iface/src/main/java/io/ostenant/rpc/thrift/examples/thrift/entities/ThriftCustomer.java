/**
 * Autogenerated by Thrift Compiler (0.10.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package io.ostenant.rpc.thrift.examples.thrift.entities;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-11-21")
public class ThriftCustomer implements org.apache.thrift.TBase<ThriftCustomer, ThriftCustomer._Fields>, java.io.Serializable, Cloneable, Comparable<ThriftCustomer> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftCustomer");

    private static final org.apache.thrift.protocol.TField IDNUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("IDNumber", org.apache.thrift.protocol.TType.STRING, (short) 1);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short) 2);
    private static final org.apache.thrift.protocol.TField BIRTHDAY_FIELD_DESC = new org.apache.thrift.protocol.TField("birthday", org.apache.thrift.protocol.TType.STRING, (short) 3);
    private static final org.apache.thrift.protocol.TField SEX_FIELD_DESC = new org.apache.thrift.protocol.TField("sex", org.apache.thrift.protocol.TType.I32, (short) 4);
    private static final org.apache.thrift.protocol.TField AGE_FIELD_DESC = new org.apache.thrift.protocol.TField("age", org.apache.thrift.protocol.TType.I32, (short) 5);
    private static final org.apache.thrift.protocol.TField ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("address", org.apache.thrift.protocol.TType.LIST, (short) 6);
    private static final org.apache.thrift.protocol.TField DEPOSIT_CARDS_FIELD_DESC = new org.apache.thrift.protocol.TField("depositCards", org.apache.thrift.protocol.TType.SET, (short) 7);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ThriftCustomerStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ThriftCustomerTupleSchemeFactory();

    public String IDNumber; // required
    public String name; // required
    public String birthday; // required
    public int sex; // required
    public int age; // required
    public java.util.List<String> address; // optional
    public java.util.Set<ThriftDepositCard> depositCards; // optional

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        IDNUMBER((short) 1, "IDNumber"),
        NAME((short) 2, "name"),
        BIRTHDAY((short) 3, "birthday"),
        SEX((short) 4, "sex"),
        AGE((short) 5, "age"),
        ADDRESS((short) 6, "address"),
        DEPOSIT_CARDS((short) 7, "depositCards");

        private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

        static {
            for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // IDNUMBER
                    return IDNUMBER;
                case 2: // NAME
                    return NAME;
                case 3: // BIRTHDAY
                    return BIRTHDAY;
                case 4: // SEX
                    return SEX;
                case 5: // AGE
                    return AGE;
                case 6: // ADDRESS
                    return ADDRESS;
                case 7: // DEPOSIT_CARDS
                    return DEPOSIT_CARDS;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __SEX_ISSET_ID = 0;
    private static final int __AGE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    private static final _Fields optionals[] = {_Fields.ADDRESS, _Fields.DEPOSIT_CARDS};
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.IDNUMBER, new org.apache.thrift.meta_data.FieldMetaData("IDNumber", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.BIRTHDAY, new org.apache.thrift.meta_data.FieldMetaData("birthday", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.SEX, new org.apache.thrift.meta_data.FieldMetaData("sex", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.AGE, new org.apache.thrift.meta_data.FieldMetaData("age", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("address", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
        tmpMap.put(_Fields.DEPOSIT_CARDS, new org.apache.thrift.meta_data.FieldMetaData("depositCards", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT, "ThriftDepositCard"))));
        metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftCustomer.class, metaDataMap);
    }

    public ThriftCustomer() {
        this.sex = 0;

    }

    public ThriftCustomer(
            String IDNumber,
            String name,
            String birthday,
            int sex,
            int age) {
        this();
        this.IDNumber = IDNumber;
        this.name = name;
        this.birthday = birthday;
        this.sex = sex;
        setSexIsSet(true);
        this.age = age;
        setAgeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ThriftCustomer(ThriftCustomer other) {
        __isset_bitfield = other.__isset_bitfield;
        if (other.isSetIDNumber()) {
            this.IDNumber = other.IDNumber;
        }
        if (other.isSetName()) {
            this.name = other.name;
        }
        if (other.isSetBirthday()) {
            this.birthday = other.birthday;
        }
        this.sex = other.sex;
        this.age = other.age;
        if (other.isSetAddress()) {
            java.util.List<String> __this__address = new java.util.ArrayList<String>(other.address);
            this.address = __this__address;
        }
        if (other.isSetDepositCards()) {
            java.util.Set<ThriftDepositCard> __this__depositCards = new java.util.HashSet<ThriftDepositCard>(other.depositCards.size());
            for (ThriftDepositCard other_element : other.depositCards) {
                __this__depositCards.add(other_element);
            }
            this.depositCards = __this__depositCards;
        }
    }

    public ThriftCustomer deepCopy() {
        return new ThriftCustomer(this);
    }

    @Override
    public void clear() {
        this.IDNumber = null;
        this.name = null;
        this.birthday = null;
        this.sex = 0;

        setAgeIsSet(false);
        this.age = 0;
        this.address = null;
        this.depositCards = null;
    }

    public String getIDNumber() {
        return this.IDNumber;
    }

    public ThriftCustomer setIDNumber(String IDNumber) {
        this.IDNumber = IDNumber;
        return this;
    }

    public void unsetIDNumber() {
        this.IDNumber = null;
    }

    /** Returns true if field IDNumber is set (has been assigned a value) and false otherwise */
    public boolean isSetIDNumber() {
        return this.IDNumber != null;
    }

    public void setIDNumberIsSet(boolean value) {
        if (!value) {
            this.IDNumber = null;
        }
    }

    public String getName() {
        return this.name;
    }

    public ThriftCustomer setName(String name) {
        this.name = name;
        return this;
    }

    public void unsetName() {
        this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
        return this.name != null;
    }

    public void setNameIsSet(boolean value) {
        if (!value) {
            this.name = null;
        }
    }

    public String getBirthday() {
        return this.birthday;
    }

    public ThriftCustomer setBirthday(String birthday) {
        this.birthday = birthday;
        return this;
    }

    public void unsetBirthday() {
        this.birthday = null;
    }

    /** Returns true if field birthday is set (has been assigned a value) and false otherwise */
    public boolean isSetBirthday() {
        return this.birthday != null;
    }

    public void setBirthdayIsSet(boolean value) {
        if (!value) {
            this.birthday = null;
        }
    }

    public int getSex() {
        return this.sex;
    }

    public ThriftCustomer setSex(int sex) {
        this.sex = sex;
        setSexIsSet(true);
        return this;
    }

    public void unsetSex() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SEX_ISSET_ID);
    }

    /** Returns true if field sex is set (has been assigned a value) and false otherwise */
    public boolean isSetSex() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SEX_ISSET_ID);
    }

    public void setSexIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SEX_ISSET_ID, value);
    }

    public int getAge() {
        return this.age;
    }

    public ThriftCustomer setAge(int age) {
        this.age = age;
        setAgeIsSet(true);
        return this;
    }

    public void unsetAge() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AGE_ISSET_ID);
    }

    /** Returns true if field age is set (has been assigned a value) and false otherwise */
    public boolean isSetAge() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AGE_ISSET_ID);
    }

    public void setAgeIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AGE_ISSET_ID, value);
    }

    public int getAddressSize() {
        return (this.address == null) ? 0 : this.address.size();
    }

    public java.util.Iterator<String> getAddressIterator() {
        return (this.address == null) ? null : this.address.iterator();
    }

    public void addToAddress(String elem) {
        if (this.address == null) {
            this.address = new java.util.ArrayList<String>();
        }
        this.address.add(elem);
    }

    public java.util.List<String> getAddress() {
        return this.address;
    }

    public ThriftCustomer setAddress(java.util.List<String> address) {
        this.address = address;
        return this;
    }

    public void unsetAddress() {
        this.address = null;
    }

    /** Returns true if field address is set (has been assigned a value) and false otherwise */
    public boolean isSetAddress() {
        return this.address != null;
    }

    public void setAddressIsSet(boolean value) {
        if (!value) {
            this.address = null;
        }
    }

    public int getDepositCardsSize() {
        return (this.depositCards == null) ? 0 : this.depositCards.size();
    }

    public java.util.Iterator<ThriftDepositCard> getDepositCardsIterator() {
        return (this.depositCards == null) ? null : this.depositCards.iterator();
    }

    public void addToDepositCards(ThriftDepositCard elem) {
        if (this.depositCards == null) {
            this.depositCards = new java.util.HashSet<ThriftDepositCard>();
        }
        this.depositCards.add(elem);
    }

    public java.util.Set<ThriftDepositCard> getDepositCards() {
        return this.depositCards;
    }

    public ThriftCustomer setDepositCards(java.util.Set<ThriftDepositCard> depositCards) {
        this.depositCards = depositCards;
        return this;
    }

    public void unsetDepositCards() {
        this.depositCards = null;
    }

    /** Returns true if field depositCards is set (has been assigned a value) and false otherwise */
    public boolean isSetDepositCards() {
        return this.depositCards != null;
    }

    public void setDepositCardsIsSet(boolean value) {
        if (!value) {
            this.depositCards = null;
        }
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case IDNUMBER:
                if (value == null) {
                    unsetIDNumber();
                } else {
                    setIDNumber((String) value);
                }
                break;

            case NAME:
                if (value == null) {
                    unsetName();
                } else {
                    setName((String) value);
                }
                break;

            case BIRTHDAY:
                if (value == null) {
                    unsetBirthday();
                } else {
                    setBirthday((String) value);
                }
                break;

            case SEX:
                if (value == null) {
                    unsetSex();
                } else {
                    setSex((Integer) value);
                }
                break;

            case AGE:
                if (value == null) {
                    unsetAge();
                } else {
                    setAge((Integer) value);
                }
                break;

            case ADDRESS:
                if (value == null) {
                    unsetAddress();
                } else {
                    setAddress((java.util.List<String>) value);
                }
                break;

            case DEPOSIT_CARDS:
                if (value == null) {
                    unsetDepositCards();
                } else {
                    setDepositCards((java.util.Set<ThriftDepositCard>) value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
            case IDNUMBER:
                return getIDNumber();

            case NAME:
                return getName();

            case BIRTHDAY:
                return getBirthday();

            case SEX:
                return getSex();

            case AGE:
                return getAge();

            case ADDRESS:
                return getAddress();

            case DEPOSIT_CARDS:
                return getDepositCards();

        }
        throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case IDNUMBER:
                return isSetIDNumber();
            case NAME:
                return isSetName();
            case BIRTHDAY:
                return isSetBirthday();
            case SEX:
                return isSetSex();
            case AGE:
                return isSetAge();
            case ADDRESS:
                return isSetAddress();
            case DEPOSIT_CARDS:
                return isSetDepositCards();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof ThriftCustomer)
            return this.equals((ThriftCustomer) that);
        return false;
    }

    public boolean equals(ThriftCustomer that) {
        if (that == null)
            return false;
        if (this == that)
            return true;

        boolean this_present_IDNumber = true && this.isSetIDNumber();
        boolean that_present_IDNumber = true && that.isSetIDNumber();
        if (this_present_IDNumber || that_present_IDNumber) {
            if (!(this_present_IDNumber && that_present_IDNumber))
                return false;
            if (!this.IDNumber.equals(that.IDNumber))
                return false;
        }

        boolean this_present_name = true && this.isSetName();
        boolean that_present_name = true && that.isSetName();
        if (this_present_name || that_present_name) {
            if (!(this_present_name && that_present_name))
                return false;
            if (!this.name.equals(that.name))
                return false;
        }

        boolean this_present_birthday = true && this.isSetBirthday();
        boolean that_present_birthday = true && that.isSetBirthday();
        if (this_present_birthday || that_present_birthday) {
            if (!(this_present_birthday && that_present_birthday))
                return false;
            if (!this.birthday.equals(that.birthday))
                return false;
        }

        boolean this_present_sex = true;
        boolean that_present_sex = true;
        if (this_present_sex || that_present_sex) {
            if (!(this_present_sex && that_present_sex))
                return false;
            if (this.sex != that.sex)
                return false;
        }

        boolean this_present_age = true;
        boolean that_present_age = true;
        if (this_present_age || that_present_age) {
            if (!(this_present_age && that_present_age))
                return false;
            if (this.age != that.age)
                return false;
        }

        boolean this_present_address = true && this.isSetAddress();
        boolean that_present_address = true && that.isSetAddress();
        if (this_present_address || that_present_address) {
            if (!(this_present_address && that_present_address))
                return false;
            if (!this.address.equals(that.address))
                return false;
        }

        boolean this_present_depositCards = true && this.isSetDepositCards();
        boolean that_present_depositCards = true && that.isSetDepositCards();
        if (this_present_depositCards || that_present_depositCards) {
            if (!(this_present_depositCards && that_present_depositCards))
                return false;
            if (!this.depositCards.equals(that.depositCards))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        int hashCode = 1;

        hashCode = hashCode * 8191 + ((isSetIDNumber()) ? 131071 : 524287);
        if (isSetIDNumber())
            hashCode = hashCode * 8191 + IDNumber.hashCode();

        hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
        if (isSetName())
            hashCode = hashCode * 8191 + name.hashCode();

        hashCode = hashCode * 8191 + ((isSetBirthday()) ? 131071 : 524287);
        if (isSetBirthday())
            hashCode = hashCode * 8191 + birthday.hashCode();

        hashCode = hashCode * 8191 + sex;

        hashCode = hashCode * 8191 + age;

        hashCode = hashCode * 8191 + ((isSetAddress()) ? 131071 : 524287);
        if (isSetAddress())
            hashCode = hashCode * 8191 + address.hashCode();

        hashCode = hashCode * 8191 + ((isSetDepositCards()) ? 131071 : 524287);
        if (isSetDepositCards())
            hashCode = hashCode * 8191 + depositCards.hashCode();

        return hashCode;
    }

    @Override
    public int compareTo(ThriftCustomer other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = Boolean.valueOf(isSetIDNumber()).compareTo(other.isSetIDNumber());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetIDNumber()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.IDNumber, other.IDNumber);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetName()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetBirthday()).compareTo(other.isSetBirthday());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetBirthday()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.birthday, other.birthday);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetSex()).compareTo(other.isSetSex());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetSex()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sex, other.sex);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetAge()).compareTo(other.isSetAge());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetAge()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.age, other.age);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetAddress()).compareTo(other.isSetAddress());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetAddress()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.address, other.address);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetDepositCards()).compareTo(other.isSetDepositCards());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetDepositCards()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.depositCards, other.depositCards);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("ThriftCustomer(");
        boolean first = true;

        sb.append("IDNumber:");
        if (this.IDNumber == null) {
            sb.append("null");
        } else {
            sb.append(this.IDNumber);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("name:");
        if (this.name == null) {
            sb.append("null");
        } else {
            sb.append(this.name);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("birthday:");
        if (this.birthday == null) {
            sb.append("null");
        } else {
            sb.append(this.birthday);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("sex:");
        sb.append(this.sex);
        first = false;
        if (!first) sb.append(", ");
        sb.append("age:");
        sb.append(this.age);
        first = false;
        if (isSetAddress()) {
            if (!first) sb.append(", ");
            sb.append("address:");
            if (this.address == null) {
                sb.append("null");
            } else {
                sb.append(this.address);
            }
            first = false;
        }
        if (isSetDepositCards()) {
            if (!first) sb.append(", ");
            sb.append("depositCards:");
            if (this.depositCards == null) {
                sb.append("null");
            } else {
                sb.append(this.depositCards);
            }
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        if (IDNumber == null) {
            throw new org.apache.thrift.protocol.TProtocolException("Required field 'IDNumber' was not present! Struct: " + toString());
        }
        if (name == null) {
            throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
        }
        if (birthday == null) {
            throw new org.apache.thrift.protocol.TProtocolException("Required field 'birthday' was not present! Struct: " + toString());
        }
        // alas, we cannot check 'sex' because it's a primitive and you chose the non-beans generator.
        // alas, we cannot check 'age' because it's a primitive and you chose the non-beans generator.
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class ThriftCustomerStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public ThriftCustomerStandardScheme getScheme() {
            return new ThriftCustomerStandardScheme();
        }
    }

    private static class ThriftCustomerStandardScheme extends org.apache.thrift.scheme.StandardScheme<ThriftCustomer> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, ThriftCustomer struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // IDNUMBER
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.IDNumber = iprot.readString();
                            struct.setIDNumberIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // NAME
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.name = iprot.readString();
                            struct.setNameIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // BIRTHDAY
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.birthday = iprot.readString();
                            struct.setBirthdayIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // SEX
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.sex = iprot.readI32();
                            struct.setSexIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 5: // AGE
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.age = iprot.readI32();
                            struct.setAgeIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 6: // ADDRESS
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list18 = iprot.readListBegin();
                                struct.address = new java.util.ArrayList<String>(_list18.size);
                                String _elem19;
                                for (int _i20 = 0; _i20 < _list18.size; ++_i20) {
                                    _elem19 = iprot.readString();
                                    struct.address.add(_elem19);
                                }
                                iprot.readListEnd();
                            }
                            struct.setAddressIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 7: // DEPOSIT_CARDS
                        if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                            {
                                org.apache.thrift.protocol.TSet _set21 = iprot.readSetBegin();
                                struct.depositCards = new java.util.HashSet<ThriftDepositCard>(2 * _set21.size);
                                ThriftDepositCard _elem22;
                                for (int _i23 = 0; _i23 < _set21.size; ++_i23) {
                                    _elem22 = new ThriftDepositCard();
                                    _elem22.read(iprot);
                                    struct.depositCards.add(_elem22);
                                }
                                iprot.readSetEnd();
                            }
                            struct.setDepositCardsIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            if (!struct.isSetSex()) {
                throw new org.apache.thrift.protocol.TProtocolException("Required field 'sex' was not found in serialized data! Struct: " + toString());
            }
            if (!struct.isSetAge()) {
                throw new org.apache.thrift.protocol.TProtocolException("Required field 'age' was not found in serialized data! Struct: " + toString());
            }
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, ThriftCustomer struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.IDNumber != null) {
                oprot.writeFieldBegin(IDNUMBER_FIELD_DESC);
                oprot.writeString(struct.IDNumber);
                oprot.writeFieldEnd();
            }
            if (struct.name != null) {
                oprot.writeFieldBegin(NAME_FIELD_DESC);
                oprot.writeString(struct.name);
                oprot.writeFieldEnd();
            }
            if (struct.birthday != null) {
                oprot.writeFieldBegin(BIRTHDAY_FIELD_DESC);
                oprot.writeString(struct.birthday);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldBegin(SEX_FIELD_DESC);
            oprot.writeI32(struct.sex);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(AGE_FIELD_DESC);
            oprot.writeI32(struct.age);
            oprot.writeFieldEnd();
            if (struct.address != null) {
                if (struct.isSetAddress()) {
                    oprot.writeFieldBegin(ADDRESS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.address.size()));
                        for (String _iter24 : struct.address) {
                            oprot.writeString(_iter24);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            if (struct.depositCards != null) {
                if (struct.isSetDepositCards()) {
                    oprot.writeFieldBegin(DEPOSIT_CARDS_FIELD_DESC);
                    {
                        oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.depositCards.size()));
                        for (ThriftDepositCard _iter25 : struct.depositCards) {
                            _iter25.write(oprot);
                        }
                        oprot.writeSetEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class ThriftCustomerTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public ThriftCustomerTupleScheme getScheme() {
            return new ThriftCustomerTupleScheme();
        }
    }

    private static class ThriftCustomerTupleScheme extends org.apache.thrift.scheme.TupleScheme<ThriftCustomer> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, ThriftCustomer struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            oprot.writeString(struct.IDNumber);
            oprot.writeString(struct.name);
            oprot.writeString(struct.birthday);
            oprot.writeI32(struct.sex);
            oprot.writeI32(struct.age);
            java.util.BitSet optionals = new java.util.BitSet();
            if (struct.isSetAddress()) {
                optionals.set(0);
            }
            if (struct.isSetDepositCards()) {
                optionals.set(1);
            }
            oprot.writeBitSet(optionals, 2);
            if (struct.isSetAddress()) {
                {
                    oprot.writeI32(struct.address.size());
                    for (String _iter26 : struct.address) {
                        oprot.writeString(_iter26);
                    }
                }
            }
            if (struct.isSetDepositCards()) {
                {
                    oprot.writeI32(struct.depositCards.size());
                    for (ThriftDepositCard _iter27 : struct.depositCards) {
                        _iter27.write(oprot);
                    }
                }
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, ThriftCustomer struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            struct.IDNumber = iprot.readString();
            struct.setIDNumberIsSet(true);
            struct.name = iprot.readString();
            struct.setNameIsSet(true);
            struct.birthday = iprot.readString();
            struct.setBirthdayIsSet(true);
            struct.sex = iprot.readI32();
            struct.setSexIsSet(true);
            struct.age = iprot.readI32();
            struct.setAgeIsSet(true);
            java.util.BitSet incoming = iprot.readBitSet(2);
            if (incoming.get(0)) {
                {
                    org.apache.thrift.protocol.TList _list28 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                    struct.address = new java.util.ArrayList<String>(_list28.size);
                    String _elem29;
                    for (int _i30 = 0; _i30 < _list28.size; ++_i30) {
                        _elem29 = iprot.readString();
                        struct.address.add(_elem29);
                    }
                }
                struct.setAddressIsSet(true);
            }
            if (incoming.get(1)) {
                {
                    org.apache.thrift.protocol.TSet _set31 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                    struct.depositCards = new java.util.HashSet<ThriftDepositCard>(2 * _set31.size);
                    ThriftDepositCard _elem32;
                    for (int _i33 = 0; _i33 < _set31.size; ++_i33) {
                        _elem32 = new ThriftDepositCard();
                        _elem32.read(iprot);
                        struct.depositCards.add(_elem32);
                    }
                }
                struct.setDepositCardsIsSet(true);
            }
        }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
        return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
}

