/**
 * Autogenerated by Thrift Compiler (0.10.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package io.ostenant.rpc.thrift.examples.thrift.service;


import io.ostenant.rpc.thrift.examples.thrift.entities.ThriftBranch;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-11-21")
public class ThriftBranchService {

    public interface Iface {

        public void addNewBranch(long bankId, ThriftBranch branch) throws org.apache.thrift.TException;

        public java.util.List<ThriftBranch> queryAllBranches(long bankId) throws org.apache.thrift.TException;

        public ThriftBranch getBranchById(long branchId) throws org.apache.thrift.TException;

    }

    public interface AsyncIface {

        public void addNewBranch(long bankId, ThriftBranch branch, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void queryAllBranches(long bankId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<ThriftBranch>> resultHandler) throws org.apache.thrift.TException;

        public void getBranchById(long branchId, org.apache.thrift.async.AsyncMethodCallback<ThriftBranch> resultHandler) throws org.apache.thrift.TException;

    }

    public static class Client extends org.apache.thrift.TServiceClient implements Iface {
        public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
            public Factory() {
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
                return new Client(prot);
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
                return new Client(iprot, oprot);
            }
        }

        public Client(org.apache.thrift.protocol.TProtocol prot) {
            super(prot, prot);
        }

        public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
            super(iprot, oprot);
        }

        public void addNewBranch(long bankId, ThriftBranch branch) throws org.apache.thrift.TException {
            send_addNewBranch(bankId, branch);
            recv_addNewBranch();
        }

        public void send_addNewBranch(long bankId, ThriftBranch branch) throws org.apache.thrift.TException {
            addNewBranch_args args = new addNewBranch_args();
            args.setBankId(bankId);
            args.setBranch(branch);
            sendBase("addNewBranch", args);
        }

        public void recv_addNewBranch() throws org.apache.thrift.TException {
            addNewBranch_result result = new addNewBranch_result();
            receiveBase(result, "addNewBranch");
            return;
        }

        public java.util.List<ThriftBranch> queryAllBranches(long bankId) throws org.apache.thrift.TException {
            send_queryAllBranches(bankId);
            return recv_queryAllBranches();
        }

        public void send_queryAllBranches(long bankId) throws org.apache.thrift.TException {
            queryAllBranches_args args = new queryAllBranches_args();
            args.setBankId(bankId);
            sendBase("queryAllBranches", args);
        }

        public java.util.List<ThriftBranch> recv_queryAllBranches() throws org.apache.thrift.TException {
            queryAllBranches_result result = new queryAllBranches_result();
            receiveBase(result, "queryAllBranches");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryAllBranches failed: unknown result");
        }

        public ThriftBranch getBranchById(long branchId) throws org.apache.thrift.TException {
            send_getBranchById(branchId);
            return recv_getBranchById();
        }

        public void send_getBranchById(long branchId) throws org.apache.thrift.TException {
            getBranchById_args args = new getBranchById_args();
            args.setBranchId(branchId);
            sendBase("getBranchById", args);
        }

        public ThriftBranch recv_getBranchById() throws org.apache.thrift.TException {
            getBranchById_result result = new getBranchById_result();
            receiveBase(result, "getBranchById");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getBranchById failed: unknown result");
        }

    }

    public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
        public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
            private org.apache.thrift.async.TAsyncClientManager clientManager;
            private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

            public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
                this.clientManager = clientManager;
                this.protocolFactory = protocolFactory;
            }

            public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
                return new AsyncClient(protocolFactory, clientManager, transport);
            }
        }

        public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
            super(protocolFactory, clientManager, transport);
        }

        public void addNewBranch(long bankId, ThriftBranch branch, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            addNewBranch_call method_call = new addNewBranch_call(bankId, branch, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class addNewBranch_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private long bankId;
            private ThriftBranch branch;

            public addNewBranch_call(long bankId, ThriftBranch branch, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.bankId = bankId;
                this.branch = branch;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addNewBranch", org.apache.thrift.protocol.TMessageType.CALL, 0));
                addNewBranch_args args = new addNewBranch_args();
                args.setBankId(bankId);
                args.setBranch(branch);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws org.apache.thrift.TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void queryAllBranches(long bankId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<ThriftBranch>> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            queryAllBranches_call method_call = new queryAllBranches_call(bankId, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class queryAllBranches_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<ThriftBranch>> {
            private long bankId;

            public queryAllBranches_call(long bankId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<ThriftBranch>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.bankId = bankId;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryAllBranches", org.apache.thrift.protocol.TMessageType.CALL, 0));
                queryAllBranches_args args = new queryAllBranches_args();
                args.setBankId(bankId);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public java.util.List<ThriftBranch> getResult() throws org.apache.thrift.TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_queryAllBranches();
            }
        }

        public void getBranchById(long branchId, org.apache.thrift.async.AsyncMethodCallback<ThriftBranch> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getBranchById_call method_call = new getBranchById_call(branchId, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getBranchById_call extends org.apache.thrift.async.TAsyncMethodCall<ThriftBranch> {
            private long branchId;

            public getBranchById_call(long branchId, org.apache.thrift.async.AsyncMethodCallback<ThriftBranch> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.branchId = branchId;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBranchById", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getBranchById_args args = new getBranchById_args();
                args.setBranchId(branchId);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public ThriftBranch getResult() throws org.apache.thrift.TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getBranchById();
            }
        }

    }

    public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
        private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());

        public Processor(I iface) {
            super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
        }

        protected Processor(I iface, java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends Iface> java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            processMap.put("addNewBranch", new addNewBranch());
            processMap.put("queryAllBranches", new queryAllBranches());
            processMap.put("getBranchById", new getBranchById());
            return processMap;
        }

        public static class addNewBranch<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addNewBranch_args> {
            public addNewBranch() {
                super("addNewBranch");
            }

            public addNewBranch_args getEmptyArgsInstance() {
                return new addNewBranch_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public addNewBranch_result getResult(I iface, addNewBranch_args args) throws org.apache.thrift.TException {
                addNewBranch_result result = new addNewBranch_result();
                iface.addNewBranch(args.bankId, args.branch);
                return result;
            }
        }

        public static class queryAllBranches<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryAllBranches_args> {
            public queryAllBranches() {
                super("queryAllBranches");
            }

            public queryAllBranches_args getEmptyArgsInstance() {
                return new queryAllBranches_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public queryAllBranches_result getResult(I iface, queryAllBranches_args args) throws org.apache.thrift.TException {
                queryAllBranches_result result = new queryAllBranches_result();
                result.success = iface.queryAllBranches(args.bankId);
                return result;
            }
        }

        public static class getBranchById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getBranchById_args> {
            public getBranchById() {
                super("getBranchById");
            }

            public getBranchById_args getEmptyArgsInstance() {
                return new getBranchById_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getBranchById_result getResult(I iface, getBranchById_args args) throws org.apache.thrift.TException {
                getBranchById_result result = new getBranchById_result();
                result.success = iface.getBranchById(args.branchId);
                return result;
            }
        }

    }

    public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
        private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());

        public AsyncProcessor(I iface) {
            super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
        }

        protected AsyncProcessor(I iface, java.util.Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends AsyncIface> java.util.Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> getProcessMap(java.util.Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            processMap.put("addNewBranch", new addNewBranch());
            processMap.put("queryAllBranches", new queryAllBranches());
            processMap.put("getBranchById", new getBranchById());
            return processMap;
        }

        public static class addNewBranch<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addNewBranch_args, Void> {
            public addNewBranch() {
                super("addNewBranch");
            }

            public addNewBranch_args getEmptyArgsInstance() {
                return new addNewBranch_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        addNewBranch_result result = new addNewBranch_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        addNewBranch_result result = new addNewBranch_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, addNewBranch_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.addNewBranch(args.bankId, args.branch, resultHandler);
            }
        }

        public static class queryAllBranches<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryAllBranches_args, java.util.List<ThriftBranch>> {
            public queryAllBranches() {
                super("queryAllBranches");
            }

            public queryAllBranches_args getEmptyArgsInstance() {
                return new queryAllBranches_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<java.util.List<ThriftBranch>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<ThriftBranch>>() {
                    public void onComplete(java.util.List<ThriftBranch> o) {
                        queryAllBranches_result result = new queryAllBranches_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        queryAllBranches_result result = new queryAllBranches_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, queryAllBranches_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<ThriftBranch>> resultHandler) throws org.apache.thrift.TException {
                iface.queryAllBranches(args.bankId, resultHandler);
            }
        }

        public static class getBranchById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getBranchById_args, ThriftBranch> {
            public getBranchById() {
                super("getBranchById");
            }

            public getBranchById_args getEmptyArgsInstance() {
                return new getBranchById_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<ThriftBranch> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<ThriftBranch>() {
                    public void onComplete(ThriftBranch o) {
                        getBranchById_result result = new getBranchById_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getBranchById_result result = new getBranchById_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getBranchById_args args, org.apache.thrift.async.AsyncMethodCallback<ThriftBranch> resultHandler) throws org.apache.thrift.TException {
                iface.getBranchById(args.branchId, resultHandler);
            }
        }

    }

    public static class addNewBranch_args implements org.apache.thrift.TBase<addNewBranch_args, addNewBranch_args._Fields>, java.io.Serializable, Cloneable, Comparable<addNewBranch_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addNewBranch_args");

        private static final org.apache.thrift.protocol.TField BANK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("bankId", org.apache.thrift.protocol.TType.I64, (short) -1);
        private static final org.apache.thrift.protocol.TField BRANCH_FIELD_DESC = new org.apache.thrift.protocol.TField("branch", org.apache.thrift.protocol.TType.STRUCT, (short) -2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addNewBranch_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addNewBranch_argsTupleSchemeFactory();

        public long bankId; // required
        public ThriftBranch branch; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            BANK_ID((short) -1, "bankId"),
            BRANCH((short) -2, "branch");

            private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case -1: // BANK_ID
                        return BANK_ID;
                    case -2: // BRANCH
                        return BRANCH;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __BANKID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.BANK_ID, new org.apache.thrift.meta_data.FieldMetaData("bankId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            tmpMap.put(_Fields.BRANCH, new org.apache.thrift.meta_data.FieldMetaData("branch", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBranch.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addNewBranch_args.class, metaDataMap);
        }

        public addNewBranch_args() {
        }

        public addNewBranch_args(
                long bankId,
                ThriftBranch branch) {
            this();
            this.bankId = bankId;
            setBankIdIsSet(true);
            this.branch = branch;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public addNewBranch_args(addNewBranch_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.bankId = other.bankId;
            if (other.isSetBranch()) {
                this.branch = new ThriftBranch(other.branch);
            }
        }

        public addNewBranch_args deepCopy() {
            return new addNewBranch_args(this);
        }

        @Override
        public void clear() {
            setBankIdIsSet(false);
            this.bankId = 0;
            this.branch = null;
        }

        public long getBankId() {
            return this.bankId;
        }

        public addNewBranch_args setBankId(long bankId) {
            this.bankId = bankId;
            setBankIdIsSet(true);
            return this;
        }

        public void unsetBankId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BANKID_ISSET_ID);
        }

        /**
         * Returns true if field bankId is set (has been assigned a value) and false otherwise
         */
        public boolean isSetBankId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BANKID_ISSET_ID);
        }

        public void setBankIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BANKID_ISSET_ID, value);
        }

        public ThriftBranch getBranch() {
            return this.branch;
        }

        public addNewBranch_args setBranch(ThriftBranch branch) {
            this.branch = branch;
            return this;
        }

        public void unsetBranch() {
            this.branch = null;
        }

        /**
         * Returns true if field branch is set (has been assigned a value) and false otherwise
         */
        public boolean isSetBranch() {
            return this.branch != null;
        }

        public void setBranchIsSet(boolean value) {
            if (!value) {
                this.branch = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case BANK_ID:
                    if (value == null) {
                        unsetBankId();
                    } else {
                        setBankId((Long) value);
                    }
                    break;

                case BRANCH:
                    if (value == null) {
                        unsetBranch();
                    } else {
                        setBranch((ThriftBranch) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case BANK_ID:
                    return getBankId();

                case BRANCH:
                    return getBranch();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case BANK_ID:
                    return isSetBankId();
                case BRANCH:
                    return isSetBranch();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof addNewBranch_args)
                return this.equals((addNewBranch_args) that);
            return false;
        }

        public boolean equals(addNewBranch_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_bankId = true;
            boolean that_present_bankId = true;
            if (this_present_bankId || that_present_bankId) {
                if (!(this_present_bankId && that_present_bankId))
                    return false;
                if (this.bankId != that.bankId)
                    return false;
            }

            boolean this_present_branch = true && this.isSetBranch();
            boolean that_present_branch = true && that.isSetBranch();
            if (this_present_branch || that_present_branch) {
                if (!(this_present_branch && that_present_branch))
                    return false;
                if (!this.branch.equals(that.branch))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(bankId);

            hashCode = hashCode * 8191 + ((isSetBranch()) ? 131071 : 524287);
            if (isSetBranch())
                hashCode = hashCode * 8191 + branch.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(addNewBranch_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetBankId()).compareTo(other.isSetBankId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetBankId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankId, other.bankId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetBranch()).compareTo(other.isSetBranch());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetBranch()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.branch, other.branch);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("addNewBranch_args(");
            boolean first = true;

            sb.append("bankId:");
            sb.append(this.bankId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("branch:");
            if (this.branch == null) {
                sb.append("null");
            } else {
                sb.append(this.branch);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (branch != null) {
                branch.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class addNewBranch_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addNewBranch_argsStandardScheme getScheme() {
                return new addNewBranch_argsStandardScheme();
            }
        }

        private static class addNewBranch_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<addNewBranch_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, addNewBranch_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case -1: // BANK_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.bankId = iprot.readI64();
                                struct.setBankIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case -2: // BRANCH
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.branch = new ThriftBranch();
                                struct.branch.read(iprot);
                                struct.setBranchIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, addNewBranch_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.branch != null) {
                    oprot.writeFieldBegin(BRANCH_FIELD_DESC);
                    struct.branch.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(BANK_ID_FIELD_DESC);
                oprot.writeI64(struct.bankId);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class addNewBranch_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addNewBranch_argsTupleScheme getScheme() {
                return new addNewBranch_argsTupleScheme();
            }
        }

        private static class addNewBranch_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<addNewBranch_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, addNewBranch_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetBankId()) {
                    optionals.set(0);
                }
                if (struct.isSetBranch()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetBankId()) {
                    oprot.writeI64(struct.bankId);
                }
                if (struct.isSetBranch()) {
                    struct.branch.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, addNewBranch_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.bankId = iprot.readI64();
                    struct.setBankIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.branch = new ThriftBranch();
                    struct.branch.read(iprot);
                    struct.setBranchIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class addNewBranch_result implements org.apache.thrift.TBase<addNewBranch_result, addNewBranch_result._Fields>, java.io.Serializable, Cloneable, Comparable<addNewBranch_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addNewBranch_result");


        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addNewBranch_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addNewBranch_resultTupleSchemeFactory();


        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addNewBranch_result.class, metaDataMap);
        }

        public addNewBranch_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public addNewBranch_result(addNewBranch_result other) {
        }

        public addNewBranch_result deepCopy() {
            return new addNewBranch_result(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof addNewBranch_result)
                return this.equals((addNewBranch_result) that);
            return false;
        }

        public boolean equals(addNewBranch_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            return hashCode;
        }

        @Override
        public int compareTo(addNewBranch_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("addNewBranch_result(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class addNewBranch_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addNewBranch_resultStandardScheme getScheme() {
                return new addNewBranch_resultStandardScheme();
            }
        }

        private static class addNewBranch_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<addNewBranch_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, addNewBranch_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, addNewBranch_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class addNewBranch_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addNewBranch_resultTupleScheme getScheme() {
                return new addNewBranch_resultTupleScheme();
            }
        }

        private static class addNewBranch_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<addNewBranch_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, addNewBranch_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, addNewBranch_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class queryAllBranches_args implements org.apache.thrift.TBase<queryAllBranches_args, queryAllBranches_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryAllBranches_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryAllBranches_args");

        private static final org.apache.thrift.protocol.TField BANK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("bankId", org.apache.thrift.protocol.TType.I64, (short) -1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queryAllBranches_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queryAllBranches_argsTupleSchemeFactory();

        public long bankId; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            BANK_ID((short) -1, "bankId");

            private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case -1: // BANK_ID
                        return BANK_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __BANKID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.BANK_ID, new org.apache.thrift.meta_data.FieldMetaData("bankId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryAllBranches_args.class, metaDataMap);
        }

        public queryAllBranches_args() {
        }

        public queryAllBranches_args(
                long bankId) {
            this();
            this.bankId = bankId;
            setBankIdIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public queryAllBranches_args(queryAllBranches_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.bankId = other.bankId;
        }

        public queryAllBranches_args deepCopy() {
            return new queryAllBranches_args(this);
        }

        @Override
        public void clear() {
            setBankIdIsSet(false);
            this.bankId = 0;
        }

        public long getBankId() {
            return this.bankId;
        }

        public queryAllBranches_args setBankId(long bankId) {
            this.bankId = bankId;
            setBankIdIsSet(true);
            return this;
        }

        public void unsetBankId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BANKID_ISSET_ID);
        }

        /**
         * Returns true if field bankId is set (has been assigned a value) and false otherwise
         */
        public boolean isSetBankId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BANKID_ISSET_ID);
        }

        public void setBankIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BANKID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case BANK_ID:
                    if (value == null) {
                        unsetBankId();
                    } else {
                        setBankId((Long) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case BANK_ID:
                    return getBankId();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case BANK_ID:
                    return isSetBankId();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof queryAllBranches_args)
                return this.equals((queryAllBranches_args) that);
            return false;
        }

        public boolean equals(queryAllBranches_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_bankId = true;
            boolean that_present_bankId = true;
            if (this_present_bankId || that_present_bankId) {
                if (!(this_present_bankId && that_present_bankId))
                    return false;
                if (this.bankId != that.bankId)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(bankId);

            return hashCode;
        }

        @Override
        public int compareTo(queryAllBranches_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetBankId()).compareTo(other.isSetBankId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetBankId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankId, other.bankId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("queryAllBranches_args(");
            boolean first = true;

            sb.append("bankId:");
            sb.append(this.bankId);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class queryAllBranches_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryAllBranches_argsStandardScheme getScheme() {
                return new queryAllBranches_argsStandardScheme();
            }
        }

        private static class queryAllBranches_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<queryAllBranches_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, queryAllBranches_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case -1: // BANK_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.bankId = iprot.readI64();
                                struct.setBankIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, queryAllBranches_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(BANK_ID_FIELD_DESC);
                oprot.writeI64(struct.bankId);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class queryAllBranches_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryAllBranches_argsTupleScheme getScheme() {
                return new queryAllBranches_argsTupleScheme();
            }
        }

        private static class queryAllBranches_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<queryAllBranches_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, queryAllBranches_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetBankId()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetBankId()) {
                    oprot.writeI64(struct.bankId);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, queryAllBranches_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.bankId = iprot.readI64();
                    struct.setBankIdIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class queryAllBranches_result implements org.apache.thrift.TBase<queryAllBranches_result, queryAllBranches_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryAllBranches_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryAllBranches_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short) 0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queryAllBranches_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queryAllBranches_resultTupleSchemeFactory();

        public java.util.List<ThriftBranch> success; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBranch.class))));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryAllBranches_result.class, metaDataMap);
        }

        public queryAllBranches_result() {
        }

        public queryAllBranches_result(
                java.util.List<ThriftBranch> success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public queryAllBranches_result(queryAllBranches_result other) {
            if (other.isSetSuccess()) {
                java.util.List<ThriftBranch> __this__success = new java.util.ArrayList<ThriftBranch>(other.success.size());
                for (ThriftBranch other_element : other.success) {
                    __this__success.add(new ThriftBranch(other_element));
                }
                this.success = __this__success;
            }
        }

        public queryAllBranches_result deepCopy() {
            return new queryAllBranches_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public java.util.Iterator<ThriftBranch> getSuccessIterator() {
            return (this.success == null) ? null : this.success.iterator();
        }

        public void addToSuccess(ThriftBranch elem) {
            if (this.success == null) {
                this.success = new java.util.ArrayList<ThriftBranch>();
            }
            this.success.add(elem);
        }

        public java.util.List<ThriftBranch> getSuccess() {
            return this.success;
        }

        public queryAllBranches_result setSuccess(java.util.List<ThriftBranch> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((java.util.List<ThriftBranch>) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof queryAllBranches_result)
                return this.equals((queryAllBranches_result) that);
            return false;
        }

        public boolean equals(queryAllBranches_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(queryAllBranches_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("queryAllBranches_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class queryAllBranches_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryAllBranches_resultStandardScheme getScheme() {
                return new queryAllBranches_resultStandardScheme();
            }
        }

        private static class queryAllBranches_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<queryAllBranches_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, queryAllBranches_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list76 = iprot.readListBegin();
                                    struct.success = new java.util.ArrayList<ThriftBranch>(_list76.size);
                                    ThriftBranch _elem77;
                                    for (int _i78 = 0; _i78 < _list76.size; ++_i78) {
                                        _elem77 = new ThriftBranch();
                                        _elem77.read(iprot);
                                        struct.success.add(_elem77);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, queryAllBranches_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
                        for (ThriftBranch _iter79 : struct.success) {
                            _iter79.write(oprot);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class queryAllBranches_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryAllBranches_resultTupleScheme getScheme() {
                return new queryAllBranches_resultTupleScheme();
            }
        }

        private static class queryAllBranches_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<queryAllBranches_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, queryAllBranches_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (ThriftBranch _iter80 : struct.success) {
                            _iter80.write(oprot);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, queryAllBranches_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list81 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                        struct.success = new java.util.ArrayList<ThriftBranch>(_list81.size);
                        ThriftBranch _elem82;
                        for (int _i83 = 0; _i83 < _list81.size; ++_i83) {
                            _elem82 = new ThriftBranch();
                            _elem82.read(iprot);
                            struct.success.add(_elem82);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getBranchById_args implements org.apache.thrift.TBase<getBranchById_args, getBranchById_args._Fields>, java.io.Serializable, Cloneable, Comparable<getBranchById_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBranchById_args");

        private static final org.apache.thrift.protocol.TField BRANCH_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("branchId", org.apache.thrift.protocol.TType.I64, (short) -1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getBranchById_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getBranchById_argsTupleSchemeFactory();

        public long branchId; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            BRANCH_ID((short) -1, "branchId");

            private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case -1: // BRANCH_ID
                        return BRANCH_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __BRANCHID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.BRANCH_ID, new org.apache.thrift.meta_data.FieldMetaData("branchId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBranchById_args.class, metaDataMap);
        }

        public getBranchById_args() {
        }

        public getBranchById_args(
                long branchId) {
            this();
            this.branchId = branchId;
            setBranchIdIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getBranchById_args(getBranchById_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.branchId = other.branchId;
        }

        public getBranchById_args deepCopy() {
            return new getBranchById_args(this);
        }

        @Override
        public void clear() {
            setBranchIdIsSet(false);
            this.branchId = 0;
        }

        public long getBranchId() {
            return this.branchId;
        }

        public getBranchById_args setBranchId(long branchId) {
            this.branchId = branchId;
            setBranchIdIsSet(true);
            return this;
        }

        public void unsetBranchId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BRANCHID_ISSET_ID);
        }

        /**
         * Returns true if field branchId is set (has been assigned a value) and false otherwise
         */
        public boolean isSetBranchId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BRANCHID_ISSET_ID);
        }

        public void setBranchIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BRANCHID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case BRANCH_ID:
                    if (value == null) {
                        unsetBranchId();
                    } else {
                        setBranchId((Long) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case BRANCH_ID:
                    return getBranchId();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case BRANCH_ID:
                    return isSetBranchId();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getBranchById_args)
                return this.equals((getBranchById_args) that);
            return false;
        }

        public boolean equals(getBranchById_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_branchId = true;
            boolean that_present_branchId = true;
            if (this_present_branchId || that_present_branchId) {
                if (!(this_present_branchId && that_present_branchId))
                    return false;
                if (this.branchId != that.branchId)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(branchId);

            return hashCode;
        }

        @Override
        public int compareTo(getBranchById_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetBranchId()).compareTo(other.isSetBranchId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetBranchId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.branchId, other.branchId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getBranchById_args(");
            boolean first = true;

            sb.append("branchId:");
            sb.append(this.branchId);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getBranchById_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getBranchById_argsStandardScheme getScheme() {
                return new getBranchById_argsStandardScheme();
            }
        }

        private static class getBranchById_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getBranchById_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getBranchById_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case -1: // BRANCH_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.branchId = iprot.readI64();
                                struct.setBranchIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getBranchById_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(BRANCH_ID_FIELD_DESC);
                oprot.writeI64(struct.branchId);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getBranchById_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getBranchById_argsTupleScheme getScheme() {
                return new getBranchById_argsTupleScheme();
            }
        }

        private static class getBranchById_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getBranchById_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getBranchById_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetBranchId()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetBranchId()) {
                    oprot.writeI64(struct.branchId);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getBranchById_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.branchId = iprot.readI64();
                    struct.setBranchIdIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getBranchById_result implements org.apache.thrift.TBase<getBranchById_result, getBranchById_result._Fields>, java.io.Serializable, Cloneable, Comparable<getBranchById_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBranchById_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getBranchById_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getBranchById_resultTupleSchemeFactory();

        public ThriftBranch success; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBranch.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBranchById_result.class, metaDataMap);
        }

        public getBranchById_result() {
        }

        public getBranchById_result(
                ThriftBranch success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getBranchById_result(getBranchById_result other) {
            if (other.isSetSuccess()) {
                this.success = new ThriftBranch(other.success);
            }
        }

        public getBranchById_result deepCopy() {
            return new getBranchById_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public ThriftBranch getSuccess() {
            return this.success;
        }

        public getBranchById_result setSuccess(ThriftBranch success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((ThriftBranch) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getBranchById_result)
                return this.equals((getBranchById_result) that);
            return false;
        }

        public boolean equals(getBranchById_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getBranchById_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getBranchById_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getBranchById_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getBranchById_resultStandardScheme getScheme() {
                return new getBranchById_resultStandardScheme();
            }
        }

        private static class getBranchById_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getBranchById_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getBranchById_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new ThriftBranch();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getBranchById_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getBranchById_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getBranchById_resultTupleScheme getScheme() {
                return new getBranchById_resultTupleScheme();
            }
        }

        private static class getBranchById_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getBranchById_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getBranchById_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getBranchById_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new ThriftBranch();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

}
