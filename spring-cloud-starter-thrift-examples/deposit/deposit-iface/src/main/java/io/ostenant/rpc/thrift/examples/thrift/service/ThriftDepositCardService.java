/**
 * Autogenerated by Thrift Compiler (0.10.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package io.ostenant.rpc.thrift.examples.thrift.service;

import io.ostenant.rpc.thrift.examples.thrift.entities.ThriftDeposit;
import io.ostenant.rpc.thrift.examples.thrift.entities.ThriftDepositCard;
import io.ostenant.rpc.thrift.examples.thrift.entities.ThriftWithdraw;
import io.ostenant.rpc.thrift.examples.thrift.enums.ThriftDepositStatus;
import io.ostenant.rpc.thrift.examples.thrift.enums.ThriftWithdrawStatus;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-11-21")
public class ThriftDepositCardService {

    public interface Iface {

        public java.util.Set<ThriftDepositCard> queryAllDepositCards(String customerId) throws org.apache.thrift.TException;

        public void addNewDepositCard(String customerId, ThriftDepositCard depositCard) throws org.apache.thrift.TException;

        public ThriftDepositStatus depositMoney(String depositCardId, double money) throws org.apache.thrift.TException;

        public ThriftWithdrawStatus withdrawMoney(String depositCardId, double money) throws org.apache.thrift.TException;

        public java.util.List<ThriftDeposit> queryDepositHistorys(String depositCardId) throws org.apache.thrift.TException;

        public java.util.List<ThriftWithdraw> queryWithdrawHistorys(String depositCardId) throws org.apache.thrift.TException;

    }

    public interface AsyncIface {

        public void queryAllDepositCards(String customerId, org.apache.thrift.async.AsyncMethodCallback<java.util.Set<ThriftDepositCard>> resultHandler) throws org.apache.thrift.TException;

        public void addNewDepositCard(String customerId, ThriftDepositCard depositCard, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void depositMoney(String depositCardId, double money, org.apache.thrift.async.AsyncMethodCallback<ThriftDepositStatus> resultHandler) throws org.apache.thrift.TException;

        public void withdrawMoney(String depositCardId, double money, org.apache.thrift.async.AsyncMethodCallback<ThriftWithdrawStatus> resultHandler) throws org.apache.thrift.TException;

        public void queryDepositHistorys(String depositCardId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<ThriftDeposit>> resultHandler) throws org.apache.thrift.TException;

        public void queryWithdrawHistorys(String depositCardId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<ThriftWithdraw>> resultHandler) throws org.apache.thrift.TException;

    }

    public static class Client extends org.apache.thrift.TServiceClient implements Iface {
        public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
            public Factory() {
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
                return new Client(prot);
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
                return new Client(iprot, oprot);
            }
        }

        public Client(org.apache.thrift.protocol.TProtocol prot) {
            super(prot, prot);
        }

        public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
            super(iprot, oprot);
        }

        public java.util.Set<ThriftDepositCard> queryAllDepositCards(String customerId) throws org.apache.thrift.TException {
            send_queryAllDepositCards(customerId);
            return recv_queryAllDepositCards();
        }

        public void send_queryAllDepositCards(String customerId) throws org.apache.thrift.TException {
            queryAllDepositCards_args args = new queryAllDepositCards_args();
            args.setCustomerId(customerId);
            sendBase("queryAllDepositCards", args);
        }

        public java.util.Set<ThriftDepositCard> recv_queryAllDepositCards() throws org.apache.thrift.TException {
            queryAllDepositCards_result result = new queryAllDepositCards_result();
            receiveBase(result, "queryAllDepositCards");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryAllDepositCards failed: unknown result");
        }

        public void addNewDepositCard(String customerId, ThriftDepositCard depositCard) throws org.apache.thrift.TException {
            send_addNewDepositCard(customerId, depositCard);
            recv_addNewDepositCard();
        }

        public void send_addNewDepositCard(String customerId, ThriftDepositCard depositCard) throws org.apache.thrift.TException {
            addNewDepositCard_args args = new addNewDepositCard_args();
            args.setCustomerId(customerId);
            args.setDepositCard(depositCard);
            sendBase("addNewDepositCard", args);
        }

        public void recv_addNewDepositCard() throws org.apache.thrift.TException {
            addNewDepositCard_result result = new addNewDepositCard_result();
            receiveBase(result, "addNewDepositCard");
            return;
        }

        public ThriftDepositStatus depositMoney(String depositCardId, double money) throws org.apache.thrift.TException {
            send_depositMoney(depositCardId, money);
            return recv_depositMoney();
        }

        public void send_depositMoney(String depositCardId, double money) throws org.apache.thrift.TException {
            depositMoney_args args = new depositMoney_args();
            args.setDepositCardId(depositCardId);
            args.setMoney(money);
            sendBase("depositMoney", args);
        }

        public ThriftDepositStatus recv_depositMoney() throws org.apache.thrift.TException {
            depositMoney_result result = new depositMoney_result();
            receiveBase(result, "depositMoney");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "depositMoney failed: unknown result");
        }

        public ThriftWithdrawStatus withdrawMoney(String depositCardId, double money) throws org.apache.thrift.TException {
            send_withdrawMoney(depositCardId, money);
            return recv_withdrawMoney();
        }

        public void send_withdrawMoney(String depositCardId, double money) throws org.apache.thrift.TException {
            withdrawMoney_args args = new withdrawMoney_args();
            args.setDepositCardId(depositCardId);
            args.setMoney(money);
            sendBase("withdrawMoney", args);
        }

        public ThriftWithdrawStatus recv_withdrawMoney() throws org.apache.thrift.TException {
            withdrawMoney_result result = new withdrawMoney_result();
            receiveBase(result, "withdrawMoney");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "withdrawMoney failed: unknown result");
        }

        public java.util.List<ThriftDeposit> queryDepositHistorys(String depositCardId) throws org.apache.thrift.TException {
            send_queryDepositHistorys(depositCardId);
            return recv_queryDepositHistorys();
        }

        public void send_queryDepositHistorys(String depositCardId) throws org.apache.thrift.TException {
            queryDepositHistorys_args args = new queryDepositHistorys_args();
            args.setDepositCardId(depositCardId);
            sendBase("queryDepositHistorys", args);
        }

        public java.util.List<ThriftDeposit> recv_queryDepositHistorys() throws org.apache.thrift.TException {
            queryDepositHistorys_result result = new queryDepositHistorys_result();
            receiveBase(result, "queryDepositHistorys");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryDepositHistorys failed: unknown result");
        }

        public java.util.List<ThriftWithdraw> queryWithdrawHistorys(String depositCardId) throws org.apache.thrift.TException {
            send_queryWithdrawHistorys(depositCardId);
            return recv_queryWithdrawHistorys();
        }

        public void send_queryWithdrawHistorys(String depositCardId) throws org.apache.thrift.TException {
            queryWithdrawHistorys_args args = new queryWithdrawHistorys_args();
            args.setDepositCardId(depositCardId);
            sendBase("queryWithdrawHistorys", args);
        }

        public java.util.List<ThriftWithdraw> recv_queryWithdrawHistorys() throws org.apache.thrift.TException {
            queryWithdrawHistorys_result result = new queryWithdrawHistorys_result();
            receiveBase(result, "queryWithdrawHistorys");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryWithdrawHistorys failed: unknown result");
        }

    }

    public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
        public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
            private org.apache.thrift.async.TAsyncClientManager clientManager;
            private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

            public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
                this.clientManager = clientManager;
                this.protocolFactory = protocolFactory;
            }

            public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
                return new AsyncClient(protocolFactory, clientManager, transport);
            }
        }

        public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
            super(protocolFactory, clientManager, transport);
        }

        public void queryAllDepositCards(String customerId, org.apache.thrift.async.AsyncMethodCallback<java.util.Set<ThriftDepositCard>> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            queryAllDepositCards_call method_call = new queryAllDepositCards_call(customerId, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class queryAllDepositCards_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.Set<ThriftDepositCard>> {
            private String customerId;

            public queryAllDepositCards_call(String customerId, org.apache.thrift.async.AsyncMethodCallback<java.util.Set<ThriftDepositCard>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.customerId = customerId;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryAllDepositCards", org.apache.thrift.protocol.TMessageType.CALL, 0));
                queryAllDepositCards_args args = new queryAllDepositCards_args();
                args.setCustomerId(customerId);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public java.util.Set<ThriftDepositCard> getResult() throws org.apache.thrift.TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_queryAllDepositCards();
            }
        }

        public void addNewDepositCard(String customerId, ThriftDepositCard depositCard, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            addNewDepositCard_call method_call = new addNewDepositCard_call(customerId, depositCard, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class addNewDepositCard_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private String customerId;
            private ThriftDepositCard depositCard;

            public addNewDepositCard_call(String customerId, ThriftDepositCard depositCard, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.customerId = customerId;
                this.depositCard = depositCard;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addNewDepositCard", org.apache.thrift.protocol.TMessageType.CALL, 0));
                addNewDepositCard_args args = new addNewDepositCard_args();
                args.setCustomerId(customerId);
                args.setDepositCard(depositCard);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws org.apache.thrift.TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void depositMoney(String depositCardId, double money, org.apache.thrift.async.AsyncMethodCallback<ThriftDepositStatus> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            depositMoney_call method_call = new depositMoney_call(depositCardId, money, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class depositMoney_call extends org.apache.thrift.async.TAsyncMethodCall<ThriftDepositStatus> {
            private String depositCardId;
            private double money;

            public depositMoney_call(String depositCardId, double money, org.apache.thrift.async.AsyncMethodCallback<ThriftDepositStatus> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.depositCardId = depositCardId;
                this.money = money;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("depositMoney", org.apache.thrift.protocol.TMessageType.CALL, 0));
                depositMoney_args args = new depositMoney_args();
                args.setDepositCardId(depositCardId);
                args.setMoney(money);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public ThriftDepositStatus getResult() throws org.apache.thrift.TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_depositMoney();
            }
        }

        public void withdrawMoney(String depositCardId, double money, org.apache.thrift.async.AsyncMethodCallback<ThriftWithdrawStatus> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            withdrawMoney_call method_call = new withdrawMoney_call(depositCardId, money, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class withdrawMoney_call extends org.apache.thrift.async.TAsyncMethodCall<ThriftWithdrawStatus> {
            private String depositCardId;
            private double money;

            public withdrawMoney_call(String depositCardId, double money, org.apache.thrift.async.AsyncMethodCallback<ThriftWithdrawStatus> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.depositCardId = depositCardId;
                this.money = money;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("withdrawMoney", org.apache.thrift.protocol.TMessageType.CALL, 0));
                withdrawMoney_args args = new withdrawMoney_args();
                args.setDepositCardId(depositCardId);
                args.setMoney(money);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public ThriftWithdrawStatus getResult() throws org.apache.thrift.TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_withdrawMoney();
            }
        }

        public void queryDepositHistorys(String depositCardId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<ThriftDeposit>> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            queryDepositHistorys_call method_call = new queryDepositHistorys_call(depositCardId, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class queryDepositHistorys_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<ThriftDeposit>> {
            private String depositCardId;

            public queryDepositHistorys_call(String depositCardId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<ThriftDeposit>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.depositCardId = depositCardId;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryDepositHistorys", org.apache.thrift.protocol.TMessageType.CALL, 0));
                queryDepositHistorys_args args = new queryDepositHistorys_args();
                args.setDepositCardId(depositCardId);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public java.util.List<ThriftDeposit> getResult() throws org.apache.thrift.TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_queryDepositHistorys();
            }
        }

        public void queryWithdrawHistorys(String depositCardId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<ThriftWithdraw>> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            queryWithdrawHistorys_call method_call = new queryWithdrawHistorys_call(depositCardId, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class queryWithdrawHistorys_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<ThriftWithdraw>> {
            private String depositCardId;

            public queryWithdrawHistorys_call(String depositCardId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<ThriftWithdraw>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.depositCardId = depositCardId;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryWithdrawHistorys", org.apache.thrift.protocol.TMessageType.CALL, 0));
                queryWithdrawHistorys_args args = new queryWithdrawHistorys_args();
                args.setDepositCardId(depositCardId);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public java.util.List<ThriftWithdraw> getResult() throws org.apache.thrift.TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_queryWithdrawHistorys();
            }
        }

    }

    public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
        private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());

        public Processor(I iface) {
            super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
        }

        protected Processor(I iface, java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends Iface> java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            processMap.put("queryAllDepositCards", new queryAllDepositCards());
            processMap.put("addNewDepositCard", new addNewDepositCard());
            processMap.put("depositMoney", new depositMoney());
            processMap.put("withdrawMoney", new withdrawMoney());
            processMap.put("queryDepositHistorys", new queryDepositHistorys());
            processMap.put("queryWithdrawHistorys", new queryWithdrawHistorys());
            return processMap;
        }

        public static class queryAllDepositCards<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryAllDepositCards_args> {
            public queryAllDepositCards() {
                super("queryAllDepositCards");
            }

            public queryAllDepositCards_args getEmptyArgsInstance() {
                return new queryAllDepositCards_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public queryAllDepositCards_result getResult(I iface, queryAllDepositCards_args args) throws org.apache.thrift.TException {
                queryAllDepositCards_result result = new queryAllDepositCards_result();
                result.success = iface.queryAllDepositCards(args.customerId);
                return result;
            }
        }

        public static class addNewDepositCard<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addNewDepositCard_args> {
            public addNewDepositCard() {
                super("addNewDepositCard");
            }

            public addNewDepositCard_args getEmptyArgsInstance() {
                return new addNewDepositCard_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public addNewDepositCard_result getResult(I iface, addNewDepositCard_args args) throws org.apache.thrift.TException {
                addNewDepositCard_result result = new addNewDepositCard_result();
                iface.addNewDepositCard(args.customerId, args.depositCard);
                return result;
            }
        }

        public static class depositMoney<I extends Iface> extends org.apache.thrift.ProcessFunction<I, depositMoney_args> {
            public depositMoney() {
                super("depositMoney");
            }

            public depositMoney_args getEmptyArgsInstance() {
                return new depositMoney_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public depositMoney_result getResult(I iface, depositMoney_args args) throws org.apache.thrift.TException {
                depositMoney_result result = new depositMoney_result();
                result.success = iface.depositMoney(args.depositCardId, args.money);
                return result;
            }
        }

        public static class withdrawMoney<I extends Iface> extends org.apache.thrift.ProcessFunction<I, withdrawMoney_args> {
            public withdrawMoney() {
                super("withdrawMoney");
            }

            public withdrawMoney_args getEmptyArgsInstance() {
                return new withdrawMoney_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public withdrawMoney_result getResult(I iface, withdrawMoney_args args) throws org.apache.thrift.TException {
                withdrawMoney_result result = new withdrawMoney_result();
                result.success = iface.withdrawMoney(args.depositCardId, args.money);
                return result;
            }
        }

        public static class queryDepositHistorys<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryDepositHistorys_args> {
            public queryDepositHistorys() {
                super("queryDepositHistorys");
            }

            public queryDepositHistorys_args getEmptyArgsInstance() {
                return new queryDepositHistorys_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public queryDepositHistorys_result getResult(I iface, queryDepositHistorys_args args) throws org.apache.thrift.TException {
                queryDepositHistorys_result result = new queryDepositHistorys_result();
                result.success = iface.queryDepositHistorys(args.depositCardId);
                return result;
            }
        }

        public static class queryWithdrawHistorys<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryWithdrawHistorys_args> {
            public queryWithdrawHistorys() {
                super("queryWithdrawHistorys");
            }

            public queryWithdrawHistorys_args getEmptyArgsInstance() {
                return new queryWithdrawHistorys_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public queryWithdrawHistorys_result getResult(I iface, queryWithdrawHistorys_args args) throws org.apache.thrift.TException {
                queryWithdrawHistorys_result result = new queryWithdrawHistorys_result();
                result.success = iface.queryWithdrawHistorys(args.depositCardId);
                return result;
            }
        }

    }

    public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
        private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());

        public AsyncProcessor(I iface) {
            super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
        }

        protected AsyncProcessor(I iface, java.util.Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends AsyncIface> java.util.Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> getProcessMap(java.util.Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            processMap.put("queryAllDepositCards", new queryAllDepositCards());
            processMap.put("addNewDepositCard", new addNewDepositCard());
            processMap.put("depositMoney", new depositMoney());
            processMap.put("withdrawMoney", new withdrawMoney());
            processMap.put("queryDepositHistorys", new queryDepositHistorys());
            processMap.put("queryWithdrawHistorys", new queryWithdrawHistorys());
            return processMap;
        }

        public static class queryAllDepositCards<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryAllDepositCards_args, java.util.Set<ThriftDepositCard>> {
            public queryAllDepositCards() {
                super("queryAllDepositCards");
            }

            public queryAllDepositCards_args getEmptyArgsInstance() {
                return new queryAllDepositCards_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<java.util.Set<ThriftDepositCard>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<java.util.Set<ThriftDepositCard>>() {
                    public void onComplete(java.util.Set<ThriftDepositCard> o) {
                        queryAllDepositCards_result result = new queryAllDepositCards_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        queryAllDepositCards_result result = new queryAllDepositCards_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, queryAllDepositCards_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.Set<ThriftDepositCard>> resultHandler) throws org.apache.thrift.TException {
                iface.queryAllDepositCards(args.customerId, resultHandler);
            }
        }

        public static class addNewDepositCard<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addNewDepositCard_args, Void> {
            public addNewDepositCard() {
                super("addNewDepositCard");
            }

            public addNewDepositCard_args getEmptyArgsInstance() {
                return new addNewDepositCard_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        addNewDepositCard_result result = new addNewDepositCard_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        addNewDepositCard_result result = new addNewDepositCard_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, addNewDepositCard_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.addNewDepositCard(args.customerId, args.depositCard, resultHandler);
            }
        }

        public static class depositMoney<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, depositMoney_args, ThriftDepositStatus> {
            public depositMoney() {
                super("depositMoney");
            }

            public depositMoney_args getEmptyArgsInstance() {
                return new depositMoney_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<ThriftDepositStatus> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<ThriftDepositStatus>() {
                    public void onComplete(ThriftDepositStatus o) {
                        depositMoney_result result = new depositMoney_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        depositMoney_result result = new depositMoney_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, depositMoney_args args, org.apache.thrift.async.AsyncMethodCallback<ThriftDepositStatus> resultHandler) throws org.apache.thrift.TException {
                iface.depositMoney(args.depositCardId, args.money, resultHandler);
            }
        }

        public static class withdrawMoney<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, withdrawMoney_args, ThriftWithdrawStatus> {
            public withdrawMoney() {
                super("withdrawMoney");
            }

            public withdrawMoney_args getEmptyArgsInstance() {
                return new withdrawMoney_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<ThriftWithdrawStatus> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<ThriftWithdrawStatus>() {
                    public void onComplete(ThriftWithdrawStatus o) {
                        withdrawMoney_result result = new withdrawMoney_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        withdrawMoney_result result = new withdrawMoney_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, withdrawMoney_args args, org.apache.thrift.async.AsyncMethodCallback<ThriftWithdrawStatus> resultHandler) throws org.apache.thrift.TException {
                iface.withdrawMoney(args.depositCardId, args.money, resultHandler);
            }
        }

        public static class queryDepositHistorys<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryDepositHistorys_args, java.util.List<ThriftDeposit>> {
            public queryDepositHistorys() {
                super("queryDepositHistorys");
            }

            public queryDepositHistorys_args getEmptyArgsInstance() {
                return new queryDepositHistorys_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<java.util.List<ThriftDeposit>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<ThriftDeposit>>() {
                    public void onComplete(java.util.List<ThriftDeposit> o) {
                        queryDepositHistorys_result result = new queryDepositHistorys_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        queryDepositHistorys_result result = new queryDepositHistorys_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, queryDepositHistorys_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<ThriftDeposit>> resultHandler) throws org.apache.thrift.TException {
                iface.queryDepositHistorys(args.depositCardId, resultHandler);
            }
        }

        public static class queryWithdrawHistorys<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryWithdrawHistorys_args, java.util.List<ThriftWithdraw>> {
            public queryWithdrawHistorys() {
                super("queryWithdrawHistorys");
            }

            public queryWithdrawHistorys_args getEmptyArgsInstance() {
                return new queryWithdrawHistorys_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<java.util.List<ThriftWithdraw>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<ThriftWithdraw>>() {
                    public void onComplete(java.util.List<ThriftWithdraw> o) {
                        queryWithdrawHistorys_result result = new queryWithdrawHistorys_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        queryWithdrawHistorys_result result = new queryWithdrawHistorys_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, queryWithdrawHistorys_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<ThriftWithdraw>> resultHandler) throws org.apache.thrift.TException {
                iface.queryWithdrawHistorys(args.depositCardId, resultHandler);
            }
        }

    }

    public static class queryAllDepositCards_args implements org.apache.thrift.TBase<queryAllDepositCards_args, queryAllDepositCards_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryAllDepositCards_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryAllDepositCards_args");

        private static final org.apache.thrift.protocol.TField CUSTOMER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("customerId", org.apache.thrift.protocol.TType.STRING, (short) -1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queryAllDepositCards_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queryAllDepositCards_argsTupleSchemeFactory();

        public String customerId; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            CUSTOMER_ID((short) -1, "customerId");

            private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case -1: // CUSTOMER_ID
                        return CUSTOMER_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.CUSTOMER_ID, new org.apache.thrift.meta_data.FieldMetaData("customerId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryAllDepositCards_args.class, metaDataMap);
        }

        public queryAllDepositCards_args() {
        }

        public queryAllDepositCards_args(
                String customerId) {
            this();
            this.customerId = customerId;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public queryAllDepositCards_args(queryAllDepositCards_args other) {
            if (other.isSetCustomerId()) {
                this.customerId = other.customerId;
            }
        }

        public queryAllDepositCards_args deepCopy() {
            return new queryAllDepositCards_args(this);
        }

        @Override
        public void clear() {
            this.customerId = null;
        }

        public String getCustomerId() {
            return this.customerId;
        }

        public queryAllDepositCards_args setCustomerId(String customerId) {
            this.customerId = customerId;
            return this;
        }

        public void unsetCustomerId() {
            this.customerId = null;
        }

        /**
         * Returns true if field customerId is set (has been assigned a value) and false otherwise
         */
        public boolean isSetCustomerId() {
            return this.customerId != null;
        }

        public void setCustomerIdIsSet(boolean value) {
            if (!value) {
                this.customerId = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case CUSTOMER_ID:
                    if (value == null) {
                        unsetCustomerId();
                    } else {
                        setCustomerId((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case CUSTOMER_ID:
                    return getCustomerId();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case CUSTOMER_ID:
                    return isSetCustomerId();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof queryAllDepositCards_args)
                return this.equals((queryAllDepositCards_args) that);
            return false;
        }

        public boolean equals(queryAllDepositCards_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_customerId = true && this.isSetCustomerId();
            boolean that_present_customerId = true && that.isSetCustomerId();
            if (this_present_customerId || that_present_customerId) {
                if (!(this_present_customerId && that_present_customerId))
                    return false;
                if (!this.customerId.equals(that.customerId))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetCustomerId()) ? 131071 : 524287);
            if (isSetCustomerId())
                hashCode = hashCode * 8191 + customerId.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(queryAllDepositCards_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetCustomerId()).compareTo(other.isSetCustomerId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCustomerId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.customerId, other.customerId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("queryAllDepositCards_args(");
            boolean first = true;

            sb.append("customerId:");
            if (this.customerId == null) {
                sb.append("null");
            } else {
                sb.append(this.customerId);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class queryAllDepositCards_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryAllDepositCards_argsStandardScheme getScheme() {
                return new queryAllDepositCards_argsStandardScheme();
            }
        }

        private static class queryAllDepositCards_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<queryAllDepositCards_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, queryAllDepositCards_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case -1: // CUSTOMER_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.customerId = iprot.readString();
                                struct.setCustomerIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, queryAllDepositCards_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.customerId != null) {
                    oprot.writeFieldBegin(CUSTOMER_ID_FIELD_DESC);
                    oprot.writeString(struct.customerId);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class queryAllDepositCards_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryAllDepositCards_argsTupleScheme getScheme() {
                return new queryAllDepositCards_argsTupleScheme();
            }
        }

        private static class queryAllDepositCards_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<queryAllDepositCards_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, queryAllDepositCards_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetCustomerId()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetCustomerId()) {
                    oprot.writeString(struct.customerId);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, queryAllDepositCards_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.customerId = iprot.readString();
                    struct.setCustomerIdIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class queryAllDepositCards_result implements org.apache.thrift.TBase<queryAllDepositCards_result, queryAllDepositCards_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryAllDepositCards_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryAllDepositCards_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.SET, (short) 0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queryAllDepositCards_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queryAllDepositCards_resultTupleSchemeFactory();

        public java.util.Set<ThriftDepositCard> success; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET,
                            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftDepositCard.class))));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryAllDepositCards_result.class, metaDataMap);
        }

        public queryAllDepositCards_result() {
        }

        public queryAllDepositCards_result(
                java.util.Set<ThriftDepositCard> success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public queryAllDepositCards_result(queryAllDepositCards_result other) {
            if (other.isSetSuccess()) {
                java.util.Set<ThriftDepositCard> __this__success = new java.util.HashSet<ThriftDepositCard>(other.success.size());
                for (ThriftDepositCard other_element : other.success) {
                    __this__success.add(new ThriftDepositCard(other_element));
                }
                this.success = __this__success;
            }
        }

        public queryAllDepositCards_result deepCopy() {
            return new queryAllDepositCards_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public java.util.Iterator<ThriftDepositCard> getSuccessIterator() {
            return (this.success == null) ? null : this.success.iterator();
        }

        public void addToSuccess(ThriftDepositCard elem) {
            if (this.success == null) {
                this.success = new java.util.HashSet<ThriftDepositCard>();
            }
            this.success.add(elem);
        }

        public java.util.Set<ThriftDepositCard> getSuccess() {
            return this.success;
        }

        public queryAllDepositCards_result setSuccess(java.util.Set<ThriftDepositCard> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((java.util.Set<ThriftDepositCard>) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof queryAllDepositCards_result)
                return this.equals((queryAllDepositCards_result) that);
            return false;
        }

        public boolean equals(queryAllDepositCards_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(queryAllDepositCards_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("queryAllDepositCards_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class queryAllDepositCards_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryAllDepositCards_resultStandardScheme getScheme() {
                return new queryAllDepositCards_resultStandardScheme();
            }
        }

        private static class queryAllDepositCards_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<queryAllDepositCards_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, queryAllDepositCards_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                                {
                                    org.apache.thrift.protocol.TSet _set92 = iprot.readSetBegin();
                                    struct.success = new java.util.HashSet<ThriftDepositCard>(2 * _set92.size);
                                    ThriftDepositCard _elem93;
                                    for (int _i94 = 0; _i94 < _set92.size; ++_i94) {
                                        _elem93 = new ThriftDepositCard();
                                        _elem93.read(iprot);
                                        struct.success.add(_elem93);
                                    }
                                    iprot.readSetEnd();
                                }
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, queryAllDepositCards_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
                        for (ThriftDepositCard _iter95 : struct.success) {
                            _iter95.write(oprot);
                        }
                        oprot.writeSetEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class queryAllDepositCards_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryAllDepositCards_resultTupleScheme getScheme() {
                return new queryAllDepositCards_resultTupleScheme();
            }
        }

        private static class queryAllDepositCards_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<queryAllDepositCards_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, queryAllDepositCards_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (ThriftDepositCard _iter96 : struct.success) {
                            _iter96.write(oprot);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, queryAllDepositCards_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TSet _set97 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                        struct.success = new java.util.HashSet<ThriftDepositCard>(2 * _set97.size);
                        ThriftDepositCard _elem98;
                        for (int _i99 = 0; _i99 < _set97.size; ++_i99) {
                            _elem98 = new ThriftDepositCard();
                            _elem98.read(iprot);
                            struct.success.add(_elem98);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class addNewDepositCard_args implements org.apache.thrift.TBase<addNewDepositCard_args, addNewDepositCard_args._Fields>, java.io.Serializable, Cloneable, Comparable<addNewDepositCard_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addNewDepositCard_args");

        private static final org.apache.thrift.protocol.TField CUSTOMER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("customerId", org.apache.thrift.protocol.TType.STRING, (short) -1);
        private static final org.apache.thrift.protocol.TField DEPOSIT_CARD_FIELD_DESC = new org.apache.thrift.protocol.TField("depositCard", org.apache.thrift.protocol.TType.STRUCT, (short) -2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addNewDepositCard_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addNewDepositCard_argsTupleSchemeFactory();

        public String customerId; // required
        public ThriftDepositCard depositCard; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            CUSTOMER_ID((short) -1, "customerId"),
            DEPOSIT_CARD((short) -2, "depositCard");

            private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case -1: // CUSTOMER_ID
                        return CUSTOMER_ID;
                    case -2: // DEPOSIT_CARD
                        return DEPOSIT_CARD;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.CUSTOMER_ID, new org.apache.thrift.meta_data.FieldMetaData("customerId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.DEPOSIT_CARD, new org.apache.thrift.meta_data.FieldMetaData("depositCard", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftDepositCard.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addNewDepositCard_args.class, metaDataMap);
        }

        public addNewDepositCard_args() {
        }

        public addNewDepositCard_args(
                String customerId,
                ThriftDepositCard depositCard) {
            this();
            this.customerId = customerId;
            this.depositCard = depositCard;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public addNewDepositCard_args(addNewDepositCard_args other) {
            if (other.isSetCustomerId()) {
                this.customerId = other.customerId;
            }
            if (other.isSetDepositCard()) {
                this.depositCard = new ThriftDepositCard(other.depositCard);
            }
        }

        public addNewDepositCard_args deepCopy() {
            return new addNewDepositCard_args(this);
        }

        @Override
        public void clear() {
            this.customerId = null;
            this.depositCard = null;
        }

        public String getCustomerId() {
            return this.customerId;
        }

        public addNewDepositCard_args setCustomerId(String customerId) {
            this.customerId = customerId;
            return this;
        }

        public void unsetCustomerId() {
            this.customerId = null;
        }

        /**
         * Returns true if field customerId is set (has been assigned a value) and false otherwise
         */
        public boolean isSetCustomerId() {
            return this.customerId != null;
        }

        public void setCustomerIdIsSet(boolean value) {
            if (!value) {
                this.customerId = null;
            }
        }

        public ThriftDepositCard getDepositCard() {
            return this.depositCard;
        }

        public addNewDepositCard_args setDepositCard(ThriftDepositCard depositCard) {
            this.depositCard = depositCard;
            return this;
        }

        public void unsetDepositCard() {
            this.depositCard = null;
        }

        /**
         * Returns true if field depositCard is set (has been assigned a value) and false otherwise
         */
        public boolean isSetDepositCard() {
            return this.depositCard != null;
        }

        public void setDepositCardIsSet(boolean value) {
            if (!value) {
                this.depositCard = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case CUSTOMER_ID:
                    if (value == null) {
                        unsetCustomerId();
                    } else {
                        setCustomerId((String) value);
                    }
                    break;

                case DEPOSIT_CARD:
                    if (value == null) {
                        unsetDepositCard();
                    } else {
                        setDepositCard((ThriftDepositCard) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case CUSTOMER_ID:
                    return getCustomerId();

                case DEPOSIT_CARD:
                    return getDepositCard();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case CUSTOMER_ID:
                    return isSetCustomerId();
                case DEPOSIT_CARD:
                    return isSetDepositCard();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof addNewDepositCard_args)
                return this.equals((addNewDepositCard_args) that);
            return false;
        }

        public boolean equals(addNewDepositCard_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_customerId = true && this.isSetCustomerId();
            boolean that_present_customerId = true && that.isSetCustomerId();
            if (this_present_customerId || that_present_customerId) {
                if (!(this_present_customerId && that_present_customerId))
                    return false;
                if (!this.customerId.equals(that.customerId))
                    return false;
            }

            boolean this_present_depositCard = true && this.isSetDepositCard();
            boolean that_present_depositCard = true && that.isSetDepositCard();
            if (this_present_depositCard || that_present_depositCard) {
                if (!(this_present_depositCard && that_present_depositCard))
                    return false;
                if (!this.depositCard.equals(that.depositCard))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetCustomerId()) ? 131071 : 524287);
            if (isSetCustomerId())
                hashCode = hashCode * 8191 + customerId.hashCode();

            hashCode = hashCode * 8191 + ((isSetDepositCard()) ? 131071 : 524287);
            if (isSetDepositCard())
                hashCode = hashCode * 8191 + depositCard.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(addNewDepositCard_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetCustomerId()).compareTo(other.isSetCustomerId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCustomerId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.customerId, other.customerId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetDepositCard()).compareTo(other.isSetDepositCard());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetDepositCard()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.depositCard, other.depositCard);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("addNewDepositCard_args(");
            boolean first = true;

            sb.append("customerId:");
            if (this.customerId == null) {
                sb.append("null");
            } else {
                sb.append(this.customerId);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("depositCard:");
            if (this.depositCard == null) {
                sb.append("null");
            } else {
                sb.append(this.depositCard);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (depositCard != null) {
                depositCard.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class addNewDepositCard_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addNewDepositCard_argsStandardScheme getScheme() {
                return new addNewDepositCard_argsStandardScheme();
            }
        }

        private static class addNewDepositCard_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<addNewDepositCard_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, addNewDepositCard_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case -1: // CUSTOMER_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.customerId = iprot.readString();
                                struct.setCustomerIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case -2: // DEPOSIT_CARD
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.depositCard = new ThriftDepositCard();
                                struct.depositCard.read(iprot);
                                struct.setDepositCardIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, addNewDepositCard_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.depositCard != null) {
                    oprot.writeFieldBegin(DEPOSIT_CARD_FIELD_DESC);
                    struct.depositCard.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.customerId != null) {
                    oprot.writeFieldBegin(CUSTOMER_ID_FIELD_DESC);
                    oprot.writeString(struct.customerId);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class addNewDepositCard_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addNewDepositCard_argsTupleScheme getScheme() {
                return new addNewDepositCard_argsTupleScheme();
            }
        }

        private static class addNewDepositCard_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<addNewDepositCard_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, addNewDepositCard_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetCustomerId()) {
                    optionals.set(0);
                }
                if (struct.isSetDepositCard()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetCustomerId()) {
                    oprot.writeString(struct.customerId);
                }
                if (struct.isSetDepositCard()) {
                    struct.depositCard.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, addNewDepositCard_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.customerId = iprot.readString();
                    struct.setCustomerIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.depositCard = new ThriftDepositCard();
                    struct.depositCard.read(iprot);
                    struct.setDepositCardIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class addNewDepositCard_result implements org.apache.thrift.TBase<addNewDepositCard_result, addNewDepositCard_result._Fields>, java.io.Serializable, Cloneable, Comparable<addNewDepositCard_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addNewDepositCard_result");


        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addNewDepositCard_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addNewDepositCard_resultTupleSchemeFactory();


        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addNewDepositCard_result.class, metaDataMap);
        }

        public addNewDepositCard_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public addNewDepositCard_result(addNewDepositCard_result other) {
        }

        public addNewDepositCard_result deepCopy() {
            return new addNewDepositCard_result(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof addNewDepositCard_result)
                return this.equals((addNewDepositCard_result) that);
            return false;
        }

        public boolean equals(addNewDepositCard_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            return hashCode;
        }

        @Override
        public int compareTo(addNewDepositCard_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("addNewDepositCard_result(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class addNewDepositCard_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addNewDepositCard_resultStandardScheme getScheme() {
                return new addNewDepositCard_resultStandardScheme();
            }
        }

        private static class addNewDepositCard_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<addNewDepositCard_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, addNewDepositCard_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, addNewDepositCard_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class addNewDepositCard_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addNewDepositCard_resultTupleScheme getScheme() {
                return new addNewDepositCard_resultTupleScheme();
            }
        }

        private static class addNewDepositCard_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<addNewDepositCard_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, addNewDepositCard_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, addNewDepositCard_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class depositMoney_args implements org.apache.thrift.TBase<depositMoney_args, depositMoney_args._Fields>, java.io.Serializable, Cloneable, Comparable<depositMoney_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("depositMoney_args");

        private static final org.apache.thrift.protocol.TField DEPOSIT_CARD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("depositCardId", org.apache.thrift.protocol.TType.STRING, (short) -1);
        private static final org.apache.thrift.protocol.TField MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("money", org.apache.thrift.protocol.TType.DOUBLE, (short) -2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new depositMoney_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new depositMoney_argsTupleSchemeFactory();

        public String depositCardId; // required
        public double money; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            DEPOSIT_CARD_ID((short) -1, "depositCardId"),
            MONEY((short) -2, "money");

            private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case -1: // DEPOSIT_CARD_ID
                        return DEPOSIT_CARD_ID;
                    case -2: // MONEY
                        return MONEY;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __MONEY_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.DEPOSIT_CARD_ID, new org.apache.thrift.meta_data.FieldMetaData("depositCardId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.MONEY, new org.apache.thrift.meta_data.FieldMetaData("money", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(depositMoney_args.class, metaDataMap);
        }

        public depositMoney_args() {
        }

        public depositMoney_args(
                String depositCardId,
                double money) {
            this();
            this.depositCardId = depositCardId;
            this.money = money;
            setMoneyIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public depositMoney_args(depositMoney_args other) {
            __isset_bitfield = other.__isset_bitfield;
            if (other.isSetDepositCardId()) {
                this.depositCardId = other.depositCardId;
            }
            this.money = other.money;
        }

        public depositMoney_args deepCopy() {
            return new depositMoney_args(this);
        }

        @Override
        public void clear() {
            this.depositCardId = null;
            setMoneyIsSet(false);
            this.money = 0.0;
        }

        public String getDepositCardId() {
            return this.depositCardId;
        }

        public depositMoney_args setDepositCardId(String depositCardId) {
            this.depositCardId = depositCardId;
            return this;
        }

        public void unsetDepositCardId() {
            this.depositCardId = null;
        }

        /**
         * Returns true if field depositCardId is set (has been assigned a value) and false otherwise
         */
        public boolean isSetDepositCardId() {
            return this.depositCardId != null;
        }

        public void setDepositCardIdIsSet(boolean value) {
            if (!value) {
                this.depositCardId = null;
            }
        }

        public double getMoney() {
            return this.money;
        }

        public depositMoney_args setMoney(double money) {
            this.money = money;
            setMoneyIsSet(true);
            return this;
        }

        public void unsetMoney() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MONEY_ISSET_ID);
        }

        /**
         * Returns true if field money is set (has been assigned a value) and false otherwise
         */
        public boolean isSetMoney() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MONEY_ISSET_ID);
        }

        public void setMoneyIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MONEY_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case DEPOSIT_CARD_ID:
                    if (value == null) {
                        unsetDepositCardId();
                    } else {
                        setDepositCardId((String) value);
                    }
                    break;

                case MONEY:
                    if (value == null) {
                        unsetMoney();
                    } else {
                        setMoney((Double) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case DEPOSIT_CARD_ID:
                    return getDepositCardId();

                case MONEY:
                    return getMoney();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case DEPOSIT_CARD_ID:
                    return isSetDepositCardId();
                case MONEY:
                    return isSetMoney();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof depositMoney_args)
                return this.equals((depositMoney_args) that);
            return false;
        }

        public boolean equals(depositMoney_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_depositCardId = true && this.isSetDepositCardId();
            boolean that_present_depositCardId = true && that.isSetDepositCardId();
            if (this_present_depositCardId || that_present_depositCardId) {
                if (!(this_present_depositCardId && that_present_depositCardId))
                    return false;
                if (!this.depositCardId.equals(that.depositCardId))
                    return false;
            }

            boolean this_present_money = true;
            boolean that_present_money = true;
            if (this_present_money || that_present_money) {
                if (!(this_present_money && that_present_money))
                    return false;
                if (this.money != that.money)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetDepositCardId()) ? 131071 : 524287);
            if (isSetDepositCardId())
                hashCode = hashCode * 8191 + depositCardId.hashCode();

            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(money);

            return hashCode;
        }

        @Override
        public int compareTo(depositMoney_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetDepositCardId()).compareTo(other.isSetDepositCardId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetDepositCardId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.depositCardId, other.depositCardId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetMoney()).compareTo(other.isSetMoney());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetMoney()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.money, other.money);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("depositMoney_args(");
            boolean first = true;

            sb.append("depositCardId:");
            if (this.depositCardId == null) {
                sb.append("null");
            } else {
                sb.append(this.depositCardId);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("money:");
            sb.append(this.money);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class depositMoney_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public depositMoney_argsStandardScheme getScheme() {
                return new depositMoney_argsStandardScheme();
            }
        }

        private static class depositMoney_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<depositMoney_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, depositMoney_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case -1: // DEPOSIT_CARD_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.depositCardId = iprot.readString();
                                struct.setDepositCardIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case -2: // MONEY
                            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                                struct.money = iprot.readDouble();
                                struct.setMoneyIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, depositMoney_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(MONEY_FIELD_DESC);
                oprot.writeDouble(struct.money);
                oprot.writeFieldEnd();
                if (struct.depositCardId != null) {
                    oprot.writeFieldBegin(DEPOSIT_CARD_ID_FIELD_DESC);
                    oprot.writeString(struct.depositCardId);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class depositMoney_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public depositMoney_argsTupleScheme getScheme() {
                return new depositMoney_argsTupleScheme();
            }
        }

        private static class depositMoney_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<depositMoney_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, depositMoney_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetDepositCardId()) {
                    optionals.set(0);
                }
                if (struct.isSetMoney()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetDepositCardId()) {
                    oprot.writeString(struct.depositCardId);
                }
                if (struct.isSetMoney()) {
                    oprot.writeDouble(struct.money);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, depositMoney_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.depositCardId = iprot.readString();
                    struct.setDepositCardIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.money = iprot.readDouble();
                    struct.setMoneyIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class depositMoney_result implements org.apache.thrift.TBase<depositMoney_result, depositMoney_result._Fields>, java.io.Serializable, Cloneable, Comparable<depositMoney_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("depositMoney_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short) 0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new depositMoney_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new depositMoney_resultTupleSchemeFactory();

        /**
         * @see ThriftDepositStatus
         */
        public ThriftDepositStatus success; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            /**
             * @see ThriftDepositStatus
             */
            SUCCESS((short) 0, "success");

            private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ThriftDepositStatus.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(depositMoney_result.class, metaDataMap);
        }

        public depositMoney_result() {
        }

        public depositMoney_result(
                ThriftDepositStatus success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public depositMoney_result(depositMoney_result other) {
            if (other.isSetSuccess()) {
                this.success = other.success;
            }
        }

        public depositMoney_result deepCopy() {
            return new depositMoney_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        /**
         * @see ThriftDepositStatus
         */
        public ThriftDepositStatus getSuccess() {
            return this.success;
        }

        /**
         * @see ThriftDepositStatus
         */
        public depositMoney_result setSuccess(ThriftDepositStatus success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((ThriftDepositStatus) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof depositMoney_result)
                return this.equals((depositMoney_result) that);
            return false;
        }

        public boolean equals(depositMoney_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.getValue();

            return hashCode;
        }

        @Override
        public int compareTo(depositMoney_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("depositMoney_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class depositMoney_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public depositMoney_resultStandardScheme getScheme() {
                return new depositMoney_resultStandardScheme();
            }
        }

        private static class depositMoney_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<depositMoney_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, depositMoney_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.success = ThriftDepositStatus.findByValue(iprot.readI32());
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, depositMoney_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeI32(struct.success.getValue());
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class depositMoney_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public depositMoney_resultTupleScheme getScheme() {
                return new depositMoney_resultTupleScheme();
            }
        }

        private static class depositMoney_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<depositMoney_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, depositMoney_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeI32(struct.success.getValue());
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, depositMoney_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = ThriftDepositStatus.findByValue(iprot.readI32());
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class withdrawMoney_args implements org.apache.thrift.TBase<withdrawMoney_args, withdrawMoney_args._Fields>, java.io.Serializable, Cloneable, Comparable<withdrawMoney_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("withdrawMoney_args");

        private static final org.apache.thrift.protocol.TField DEPOSIT_CARD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("depositCardId", org.apache.thrift.protocol.TType.STRING, (short) -1);
        private static final org.apache.thrift.protocol.TField MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("money", org.apache.thrift.protocol.TType.DOUBLE, (short) -2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new withdrawMoney_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new withdrawMoney_argsTupleSchemeFactory();

        public String depositCardId; // required
        public double money; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            DEPOSIT_CARD_ID((short) -1, "depositCardId"),
            MONEY((short) -2, "money");

            private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case -1: // DEPOSIT_CARD_ID
                        return DEPOSIT_CARD_ID;
                    case -2: // MONEY
                        return MONEY;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __MONEY_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.DEPOSIT_CARD_ID, new org.apache.thrift.meta_data.FieldMetaData("depositCardId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.MONEY, new org.apache.thrift.meta_data.FieldMetaData("money", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(withdrawMoney_args.class, metaDataMap);
        }

        public withdrawMoney_args() {
        }

        public withdrawMoney_args(
                String depositCardId,
                double money) {
            this();
            this.depositCardId = depositCardId;
            this.money = money;
            setMoneyIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public withdrawMoney_args(withdrawMoney_args other) {
            __isset_bitfield = other.__isset_bitfield;
            if (other.isSetDepositCardId()) {
                this.depositCardId = other.depositCardId;
            }
            this.money = other.money;
        }

        public withdrawMoney_args deepCopy() {
            return new withdrawMoney_args(this);
        }

        @Override
        public void clear() {
            this.depositCardId = null;
            setMoneyIsSet(false);
            this.money = 0.0;
        }

        public String getDepositCardId() {
            return this.depositCardId;
        }

        public withdrawMoney_args setDepositCardId(String depositCardId) {
            this.depositCardId = depositCardId;
            return this;
        }

        public void unsetDepositCardId() {
            this.depositCardId = null;
        }

        /**
         * Returns true if field depositCardId is set (has been assigned a value) and false otherwise
         */
        public boolean isSetDepositCardId() {
            return this.depositCardId != null;
        }

        public void setDepositCardIdIsSet(boolean value) {
            if (!value) {
                this.depositCardId = null;
            }
        }

        public double getMoney() {
            return this.money;
        }

        public withdrawMoney_args setMoney(double money) {
            this.money = money;
            setMoneyIsSet(true);
            return this;
        }

        public void unsetMoney() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MONEY_ISSET_ID);
        }

        /**
         * Returns true if field money is set (has been assigned a value) and false otherwise
         */
        public boolean isSetMoney() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MONEY_ISSET_ID);
        }

        public void setMoneyIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MONEY_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case DEPOSIT_CARD_ID:
                    if (value == null) {
                        unsetDepositCardId();
                    } else {
                        setDepositCardId((String) value);
                    }
                    break;

                case MONEY:
                    if (value == null) {
                        unsetMoney();
                    } else {
                        setMoney((Double) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case DEPOSIT_CARD_ID:
                    return getDepositCardId();

                case MONEY:
                    return getMoney();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case DEPOSIT_CARD_ID:
                    return isSetDepositCardId();
                case MONEY:
                    return isSetMoney();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof withdrawMoney_args)
                return this.equals((withdrawMoney_args) that);
            return false;
        }

        public boolean equals(withdrawMoney_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_depositCardId = true && this.isSetDepositCardId();
            boolean that_present_depositCardId = true && that.isSetDepositCardId();
            if (this_present_depositCardId || that_present_depositCardId) {
                if (!(this_present_depositCardId && that_present_depositCardId))
                    return false;
                if (!this.depositCardId.equals(that.depositCardId))
                    return false;
            }

            boolean this_present_money = true;
            boolean that_present_money = true;
            if (this_present_money || that_present_money) {
                if (!(this_present_money && that_present_money))
                    return false;
                if (this.money != that.money)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetDepositCardId()) ? 131071 : 524287);
            if (isSetDepositCardId())
                hashCode = hashCode * 8191 + depositCardId.hashCode();

            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(money);

            return hashCode;
        }

        @Override
        public int compareTo(withdrawMoney_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetDepositCardId()).compareTo(other.isSetDepositCardId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetDepositCardId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.depositCardId, other.depositCardId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetMoney()).compareTo(other.isSetMoney());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetMoney()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.money, other.money);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("withdrawMoney_args(");
            boolean first = true;

            sb.append("depositCardId:");
            if (this.depositCardId == null) {
                sb.append("null");
            } else {
                sb.append(this.depositCardId);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("money:");
            sb.append(this.money);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class withdrawMoney_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public withdrawMoney_argsStandardScheme getScheme() {
                return new withdrawMoney_argsStandardScheme();
            }
        }

        private static class withdrawMoney_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<withdrawMoney_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, withdrawMoney_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case -1: // DEPOSIT_CARD_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.depositCardId = iprot.readString();
                                struct.setDepositCardIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case -2: // MONEY
                            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                                struct.money = iprot.readDouble();
                                struct.setMoneyIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, withdrawMoney_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(MONEY_FIELD_DESC);
                oprot.writeDouble(struct.money);
                oprot.writeFieldEnd();
                if (struct.depositCardId != null) {
                    oprot.writeFieldBegin(DEPOSIT_CARD_ID_FIELD_DESC);
                    oprot.writeString(struct.depositCardId);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class withdrawMoney_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public withdrawMoney_argsTupleScheme getScheme() {
                return new withdrawMoney_argsTupleScheme();
            }
        }

        private static class withdrawMoney_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<withdrawMoney_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, withdrawMoney_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetDepositCardId()) {
                    optionals.set(0);
                }
                if (struct.isSetMoney()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetDepositCardId()) {
                    oprot.writeString(struct.depositCardId);
                }
                if (struct.isSetMoney()) {
                    oprot.writeDouble(struct.money);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, withdrawMoney_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.depositCardId = iprot.readString();
                    struct.setDepositCardIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.money = iprot.readDouble();
                    struct.setMoneyIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class withdrawMoney_result implements org.apache.thrift.TBase<withdrawMoney_result, withdrawMoney_result._Fields>, java.io.Serializable, Cloneable, Comparable<withdrawMoney_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("withdrawMoney_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short) 0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new withdrawMoney_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new withdrawMoney_resultTupleSchemeFactory();

        /**
         * @see ThriftWithdrawStatus
         */
        public ThriftWithdrawStatus success; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            /**
             * @see ThriftWithdrawStatus
             */
            SUCCESS((short) 0, "success");

            private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ThriftWithdrawStatus.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(withdrawMoney_result.class, metaDataMap);
        }

        public withdrawMoney_result() {
        }

        public withdrawMoney_result(
                ThriftWithdrawStatus success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public withdrawMoney_result(withdrawMoney_result other) {
            if (other.isSetSuccess()) {
                this.success = other.success;
            }
        }

        public withdrawMoney_result deepCopy() {
            return new withdrawMoney_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        /**
         * @see ThriftWithdrawStatus
         */
        public ThriftWithdrawStatus getSuccess() {
            return this.success;
        }

        /**
         * @see ThriftWithdrawStatus
         */
        public withdrawMoney_result setSuccess(ThriftWithdrawStatus success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((ThriftWithdrawStatus) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof withdrawMoney_result)
                return this.equals((withdrawMoney_result) that);
            return false;
        }

        public boolean equals(withdrawMoney_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.getValue();

            return hashCode;
        }

        @Override
        public int compareTo(withdrawMoney_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("withdrawMoney_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class withdrawMoney_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public withdrawMoney_resultStandardScheme getScheme() {
                return new withdrawMoney_resultStandardScheme();
            }
        }

        private static class withdrawMoney_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<withdrawMoney_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, withdrawMoney_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.success = ThriftWithdrawStatus.findByValue(iprot.readI32());
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, withdrawMoney_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeI32(struct.success.getValue());
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class withdrawMoney_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public withdrawMoney_resultTupleScheme getScheme() {
                return new withdrawMoney_resultTupleScheme();
            }
        }

        private static class withdrawMoney_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<withdrawMoney_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, withdrawMoney_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeI32(struct.success.getValue());
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, withdrawMoney_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = ThriftWithdrawStatus.findByValue(iprot.readI32());
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class queryDepositHistorys_args implements org.apache.thrift.TBase<queryDepositHistorys_args, queryDepositHistorys_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryDepositHistorys_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryDepositHistorys_args");

        private static final org.apache.thrift.protocol.TField DEPOSIT_CARD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("depositCardId", org.apache.thrift.protocol.TType.STRING, (short) -1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queryDepositHistorys_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queryDepositHistorys_argsTupleSchemeFactory();

        public String depositCardId; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            DEPOSIT_CARD_ID((short) -1, "depositCardId");

            private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case -1: // DEPOSIT_CARD_ID
                        return DEPOSIT_CARD_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.DEPOSIT_CARD_ID, new org.apache.thrift.meta_data.FieldMetaData("depositCardId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryDepositHistorys_args.class, metaDataMap);
        }

        public queryDepositHistorys_args() {
        }

        public queryDepositHistorys_args(
                String depositCardId) {
            this();
            this.depositCardId = depositCardId;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public queryDepositHistorys_args(queryDepositHistorys_args other) {
            if (other.isSetDepositCardId()) {
                this.depositCardId = other.depositCardId;
            }
        }

        public queryDepositHistorys_args deepCopy() {
            return new queryDepositHistorys_args(this);
        }

        @Override
        public void clear() {
            this.depositCardId = null;
        }

        public String getDepositCardId() {
            return this.depositCardId;
        }

        public queryDepositHistorys_args setDepositCardId(String depositCardId) {
            this.depositCardId = depositCardId;
            return this;
        }

        public void unsetDepositCardId() {
            this.depositCardId = null;
        }

        /**
         * Returns true if field depositCardId is set (has been assigned a value) and false otherwise
         */
        public boolean isSetDepositCardId() {
            return this.depositCardId != null;
        }

        public void setDepositCardIdIsSet(boolean value) {
            if (!value) {
                this.depositCardId = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case DEPOSIT_CARD_ID:
                    if (value == null) {
                        unsetDepositCardId();
                    } else {
                        setDepositCardId((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case DEPOSIT_CARD_ID:
                    return getDepositCardId();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case DEPOSIT_CARD_ID:
                    return isSetDepositCardId();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof queryDepositHistorys_args)
                return this.equals((queryDepositHistorys_args) that);
            return false;
        }

        public boolean equals(queryDepositHistorys_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_depositCardId = true && this.isSetDepositCardId();
            boolean that_present_depositCardId = true && that.isSetDepositCardId();
            if (this_present_depositCardId || that_present_depositCardId) {
                if (!(this_present_depositCardId && that_present_depositCardId))
                    return false;
                if (!this.depositCardId.equals(that.depositCardId))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetDepositCardId()) ? 131071 : 524287);
            if (isSetDepositCardId())
                hashCode = hashCode * 8191 + depositCardId.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(queryDepositHistorys_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetDepositCardId()).compareTo(other.isSetDepositCardId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetDepositCardId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.depositCardId, other.depositCardId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("queryDepositHistorys_args(");
            boolean first = true;

            sb.append("depositCardId:");
            if (this.depositCardId == null) {
                sb.append("null");
            } else {
                sb.append(this.depositCardId);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class queryDepositHistorys_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryDepositHistorys_argsStandardScheme getScheme() {
                return new queryDepositHistorys_argsStandardScheme();
            }
        }

        private static class queryDepositHistorys_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<queryDepositHistorys_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, queryDepositHistorys_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case -1: // DEPOSIT_CARD_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.depositCardId = iprot.readString();
                                struct.setDepositCardIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, queryDepositHistorys_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.depositCardId != null) {
                    oprot.writeFieldBegin(DEPOSIT_CARD_ID_FIELD_DESC);
                    oprot.writeString(struct.depositCardId);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class queryDepositHistorys_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryDepositHistorys_argsTupleScheme getScheme() {
                return new queryDepositHistorys_argsTupleScheme();
            }
        }

        private static class queryDepositHistorys_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<queryDepositHistorys_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, queryDepositHistorys_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetDepositCardId()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetDepositCardId()) {
                    oprot.writeString(struct.depositCardId);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, queryDepositHistorys_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.depositCardId = iprot.readString();
                    struct.setDepositCardIdIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class queryDepositHistorys_result implements org.apache.thrift.TBase<queryDepositHistorys_result, queryDepositHistorys_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryDepositHistorys_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryDepositHistorys_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short) 0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queryDepositHistorys_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queryDepositHistorys_resultTupleSchemeFactory();

        public java.util.List<ThriftDeposit> success; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftDeposit.class))));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryDepositHistorys_result.class, metaDataMap);
        }

        public queryDepositHistorys_result() {
        }

        public queryDepositHistorys_result(
                java.util.List<ThriftDeposit> success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public queryDepositHistorys_result(queryDepositHistorys_result other) {
            if (other.isSetSuccess()) {
                java.util.List<ThriftDeposit> __this__success = new java.util.ArrayList<ThriftDeposit>(other.success.size());
                for (ThriftDeposit other_element : other.success) {
                    __this__success.add(new ThriftDeposit(other_element));
                }
                this.success = __this__success;
            }
        }

        public queryDepositHistorys_result deepCopy() {
            return new queryDepositHistorys_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public java.util.Iterator<ThriftDeposit> getSuccessIterator() {
            return (this.success == null) ? null : this.success.iterator();
        }

        public void addToSuccess(ThriftDeposit elem) {
            if (this.success == null) {
                this.success = new java.util.ArrayList<ThriftDeposit>();
            }
            this.success.add(elem);
        }

        public java.util.List<ThriftDeposit> getSuccess() {
            return this.success;
        }

        public queryDepositHistorys_result setSuccess(java.util.List<ThriftDeposit> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((java.util.List<ThriftDeposit>) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof queryDepositHistorys_result)
                return this.equals((queryDepositHistorys_result) that);
            return false;
        }

        public boolean equals(queryDepositHistorys_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(queryDepositHistorys_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("queryDepositHistorys_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class queryDepositHistorys_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryDepositHistorys_resultStandardScheme getScheme() {
                return new queryDepositHistorys_resultStandardScheme();
            }
        }

        private static class queryDepositHistorys_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<queryDepositHistorys_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, queryDepositHistorys_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list100 = iprot.readListBegin();
                                    struct.success = new java.util.ArrayList<ThriftDeposit>(_list100.size);
                                    ThriftDeposit _elem101;
                                    for (int _i102 = 0; _i102 < _list100.size; ++_i102) {
                                        _elem101 = new ThriftDeposit();
                                        _elem101.read(iprot);
                                        struct.success.add(_elem101);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, queryDepositHistorys_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
                        for (ThriftDeposit _iter103 : struct.success) {
                            _iter103.write(oprot);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class queryDepositHistorys_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryDepositHistorys_resultTupleScheme getScheme() {
                return new queryDepositHistorys_resultTupleScheme();
            }
        }

        private static class queryDepositHistorys_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<queryDepositHistorys_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, queryDepositHistorys_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (ThriftDeposit _iter104 : struct.success) {
                            _iter104.write(oprot);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, queryDepositHistorys_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list105 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                        struct.success = new java.util.ArrayList<ThriftDeposit>(_list105.size);
                        ThriftDeposit _elem106;
                        for (int _i107 = 0; _i107 < _list105.size; ++_i107) {
                            _elem106 = new ThriftDeposit();
                            _elem106.read(iprot);
                            struct.success.add(_elem106);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class queryWithdrawHistorys_args implements org.apache.thrift.TBase<queryWithdrawHistorys_args, queryWithdrawHistorys_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryWithdrawHistorys_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryWithdrawHistorys_args");

        private static final org.apache.thrift.protocol.TField DEPOSIT_CARD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("depositCardId", org.apache.thrift.protocol.TType.STRING, (short) -1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queryWithdrawHistorys_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queryWithdrawHistorys_argsTupleSchemeFactory();

        public String depositCardId; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            DEPOSIT_CARD_ID((short) -1, "depositCardId");

            private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case -1: // DEPOSIT_CARD_ID
                        return DEPOSIT_CARD_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.DEPOSIT_CARD_ID, new org.apache.thrift.meta_data.FieldMetaData("depositCardId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryWithdrawHistorys_args.class, metaDataMap);
        }

        public queryWithdrawHistorys_args() {
        }

        public queryWithdrawHistorys_args(
                String depositCardId) {
            this();
            this.depositCardId = depositCardId;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public queryWithdrawHistorys_args(queryWithdrawHistorys_args other) {
            if (other.isSetDepositCardId()) {
                this.depositCardId = other.depositCardId;
            }
        }

        public queryWithdrawHistorys_args deepCopy() {
            return new queryWithdrawHistorys_args(this);
        }

        @Override
        public void clear() {
            this.depositCardId = null;
        }

        public String getDepositCardId() {
            return this.depositCardId;
        }

        public queryWithdrawHistorys_args setDepositCardId(String depositCardId) {
            this.depositCardId = depositCardId;
            return this;
        }

        public void unsetDepositCardId() {
            this.depositCardId = null;
        }

        /**
         * Returns true if field depositCardId is set (has been assigned a value) and false otherwise
         */
        public boolean isSetDepositCardId() {
            return this.depositCardId != null;
        }

        public void setDepositCardIdIsSet(boolean value) {
            if (!value) {
                this.depositCardId = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case DEPOSIT_CARD_ID:
                    if (value == null) {
                        unsetDepositCardId();
                    } else {
                        setDepositCardId((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case DEPOSIT_CARD_ID:
                    return getDepositCardId();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case DEPOSIT_CARD_ID:
                    return isSetDepositCardId();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof queryWithdrawHistorys_args)
                return this.equals((queryWithdrawHistorys_args) that);
            return false;
        }

        public boolean equals(queryWithdrawHistorys_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_depositCardId = true && this.isSetDepositCardId();
            boolean that_present_depositCardId = true && that.isSetDepositCardId();
            if (this_present_depositCardId || that_present_depositCardId) {
                if (!(this_present_depositCardId && that_present_depositCardId))
                    return false;
                if (!this.depositCardId.equals(that.depositCardId))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetDepositCardId()) ? 131071 : 524287);
            if (isSetDepositCardId())
                hashCode = hashCode * 8191 + depositCardId.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(queryWithdrawHistorys_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetDepositCardId()).compareTo(other.isSetDepositCardId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetDepositCardId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.depositCardId, other.depositCardId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("queryWithdrawHistorys_args(");
            boolean first = true;

            sb.append("depositCardId:");
            if (this.depositCardId == null) {
                sb.append("null");
            } else {
                sb.append(this.depositCardId);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class queryWithdrawHistorys_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryWithdrawHistorys_argsStandardScheme getScheme() {
                return new queryWithdrawHistorys_argsStandardScheme();
            }
        }

        private static class queryWithdrawHistorys_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<queryWithdrawHistorys_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, queryWithdrawHistorys_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case -1: // DEPOSIT_CARD_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.depositCardId = iprot.readString();
                                struct.setDepositCardIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, queryWithdrawHistorys_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.depositCardId != null) {
                    oprot.writeFieldBegin(DEPOSIT_CARD_ID_FIELD_DESC);
                    oprot.writeString(struct.depositCardId);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class queryWithdrawHistorys_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryWithdrawHistorys_argsTupleScheme getScheme() {
                return new queryWithdrawHistorys_argsTupleScheme();
            }
        }

        private static class queryWithdrawHistorys_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<queryWithdrawHistorys_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, queryWithdrawHistorys_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetDepositCardId()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetDepositCardId()) {
                    oprot.writeString(struct.depositCardId);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, queryWithdrawHistorys_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.depositCardId = iprot.readString();
                    struct.setDepositCardIdIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class queryWithdrawHistorys_result implements org.apache.thrift.TBase<queryWithdrawHistorys_result, queryWithdrawHistorys_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryWithdrawHistorys_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryWithdrawHistorys_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short) 0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queryWithdrawHistorys_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queryWithdrawHistorys_resultTupleSchemeFactory();

        public java.util.List<ThriftWithdraw> success; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftWithdraw.class))));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryWithdrawHistorys_result.class, metaDataMap);
        }

        public queryWithdrawHistorys_result() {
        }

        public queryWithdrawHistorys_result(
                java.util.List<ThriftWithdraw> success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public queryWithdrawHistorys_result(queryWithdrawHistorys_result other) {
            if (other.isSetSuccess()) {
                java.util.List<ThriftWithdraw> __this__success = new java.util.ArrayList<ThriftWithdraw>(other.success.size());
                for (ThriftWithdraw other_element : other.success) {
                    __this__success.add(new ThriftWithdraw(other_element));
                }
                this.success = __this__success;
            }
        }

        public queryWithdrawHistorys_result deepCopy() {
            return new queryWithdrawHistorys_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public java.util.Iterator<ThriftWithdraw> getSuccessIterator() {
            return (this.success == null) ? null : this.success.iterator();
        }

        public void addToSuccess(ThriftWithdraw elem) {
            if (this.success == null) {
                this.success = new java.util.ArrayList<ThriftWithdraw>();
            }
            this.success.add(elem);
        }

        public java.util.List<ThriftWithdraw> getSuccess() {
            return this.success;
        }

        public queryWithdrawHistorys_result setSuccess(java.util.List<ThriftWithdraw> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((java.util.List<ThriftWithdraw>) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof queryWithdrawHistorys_result)
                return this.equals((queryWithdrawHistorys_result) that);
            return false;
        }

        public boolean equals(queryWithdrawHistorys_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(queryWithdrawHistorys_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("queryWithdrawHistorys_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class queryWithdrawHistorys_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryWithdrawHistorys_resultStandardScheme getScheme() {
                return new queryWithdrawHistorys_resultStandardScheme();
            }
        }

        private static class queryWithdrawHistorys_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<queryWithdrawHistorys_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, queryWithdrawHistorys_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list108 = iprot.readListBegin();
                                    struct.success = new java.util.ArrayList<ThriftWithdraw>(_list108.size);
                                    ThriftWithdraw _elem109;
                                    for (int _i110 = 0; _i110 < _list108.size; ++_i110) {
                                        _elem109 = new ThriftWithdraw();
                                        _elem109.read(iprot);
                                        struct.success.add(_elem109);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, queryWithdrawHistorys_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
                        for (ThriftWithdraw _iter111 : struct.success) {
                            _iter111.write(oprot);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class queryWithdrawHistorys_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryWithdrawHistorys_resultTupleScheme getScheme() {
                return new queryWithdrawHistorys_resultTupleScheme();
            }
        }

        private static class queryWithdrawHistorys_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<queryWithdrawHistorys_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, queryWithdrawHistorys_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (ThriftWithdraw _iter112 : struct.success) {
                            _iter112.write(oprot);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, queryWithdrawHistorys_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list113 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                        struct.success = new java.util.ArrayList<ThriftWithdraw>(_list113.size);
                        ThriftWithdraw _elem114;
                        for (int _i115 = 0; _i115 < _list113.size; ++_i115) {
                            _elem114 = new ThriftWithdraw();
                            _elem114.read(iprot);
                            struct.success.add(_elem114);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

}
