/**
 * Autogenerated by Thrift Compiler (0.10.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package io.ostenant.rpc.thrift.examples.thrift.service;


import io.ostenant.rpc.thrift.examples.thrift.entities.ThriftBank;
import io.ostenant.rpc.thrift.examples.thrift.entities.ThriftBranch;
import io.ostenant.rpc.thrift.examples.thrift.enums.ThriftRegion;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-11-21")
public class ThriftBankService {

    public interface Iface {

        public void registerNewBank(ThriftBank bank) throws org.apache.thrift.TException;

        public java.util.List<ThriftBank> queryAllBanks() throws org.apache.thrift.TException;

        public ThriftBank getBankById(long bankId) throws org.apache.thrift.TException;

        public java.util.Map<ThriftRegion, java.util.List<ThriftBranch>> queryAllBranchesByRegion(long bankId) throws org.apache.thrift.TException;

    }

    public interface AsyncIface {

        public void registerNewBank(ThriftBank bank, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void queryAllBanks(org.apache.thrift.async.AsyncMethodCallback<java.util.List<ThriftBank>> resultHandler) throws org.apache.thrift.TException;

        public void getBankById(long bankId, org.apache.thrift.async.AsyncMethodCallback<ThriftBank> resultHandler) throws org.apache.thrift.TException;

        public void queryAllBranchesByRegion(long bankId, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<ThriftRegion, java.util.List<ThriftBranch>>> resultHandler) throws org.apache.thrift.TException;

    }

    public static class Client extends org.apache.thrift.TServiceClient implements Iface {
        public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
            public Factory() {
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
                return new Client(prot);
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
                return new Client(iprot, oprot);
            }
        }

        public Client(org.apache.thrift.protocol.TProtocol prot) {
            super(prot, prot);
        }

        public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
            super(iprot, oprot);
        }

        public void registerNewBank(ThriftBank bank) throws org.apache.thrift.TException {
            send_registerNewBank(bank);
            recv_registerNewBank();
        }

        public void send_registerNewBank(ThriftBank bank) throws org.apache.thrift.TException {
            registerNewBank_args args = new registerNewBank_args();
            args.setBank(bank);
            sendBase("registerNewBank", args);
        }

        public void recv_registerNewBank() throws org.apache.thrift.TException {
            registerNewBank_result result = new registerNewBank_result();
            receiveBase(result, "registerNewBank");
            return;
        }

        public java.util.List<ThriftBank> queryAllBanks() throws org.apache.thrift.TException {
            send_queryAllBanks();
            return recv_queryAllBanks();
        }

        public void send_queryAllBanks() throws org.apache.thrift.TException {
            queryAllBanks_args args = new queryAllBanks_args();
            sendBase("queryAllBanks", args);
        }

        public java.util.List<ThriftBank> recv_queryAllBanks() throws org.apache.thrift.TException {
            queryAllBanks_result result = new queryAllBanks_result();
            receiveBase(result, "queryAllBanks");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryAllBanks failed: unknown result");
        }

        public ThriftBank getBankById(long bankId) throws org.apache.thrift.TException {
            send_getBankById(bankId);
            return recv_getBankById();
        }

        public void send_getBankById(long bankId) throws org.apache.thrift.TException {
            getBankById_args args = new getBankById_args();
            args.setBankId(bankId);
            sendBase("getBankById", args);
        }

        public ThriftBank recv_getBankById() throws org.apache.thrift.TException {
            getBankById_result result = new getBankById_result();
            receiveBase(result, "getBankById");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getBankById failed: unknown result");
        }

        public java.util.Map<ThriftRegion, java.util.List<ThriftBranch>> queryAllBranchesByRegion(long bankId) throws org.apache.thrift.TException {
            send_queryAllBranchesByRegion(bankId);
            return recv_queryAllBranchesByRegion();
        }

        public void send_queryAllBranchesByRegion(long bankId) throws org.apache.thrift.TException {
            queryAllBranchesByRegion_args args = new queryAllBranchesByRegion_args();
            args.setBankId(bankId);
            sendBase("queryAllBranchesByRegion", args);
        }

        public java.util.Map<ThriftRegion, java.util.List<ThriftBranch>> recv_queryAllBranchesByRegion() throws org.apache.thrift.TException {
            queryAllBranchesByRegion_result result = new queryAllBranchesByRegion_result();
            receiveBase(result, "queryAllBranchesByRegion");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryAllBranchesByRegion failed: unknown result");
        }

    }

    public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
        public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
            private org.apache.thrift.async.TAsyncClientManager clientManager;
            private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

            public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
                this.clientManager = clientManager;
                this.protocolFactory = protocolFactory;
            }

            public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
                return new AsyncClient(protocolFactory, clientManager, transport);
            }
        }

        public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
            super(protocolFactory, clientManager, transport);
        }

        public void registerNewBank(ThriftBank bank, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            registerNewBank_call method_call = new registerNewBank_call(bank, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class registerNewBank_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private ThriftBank bank;

            public registerNewBank_call(ThriftBank bank, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.bank = bank;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("registerNewBank", org.apache.thrift.protocol.TMessageType.CALL, 0));
                registerNewBank_args args = new registerNewBank_args();
                args.setBank(bank);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws org.apache.thrift.TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void queryAllBanks(org.apache.thrift.async.AsyncMethodCallback<java.util.List<ThriftBank>> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            queryAllBanks_call method_call = new queryAllBanks_call(resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class queryAllBanks_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<ThriftBank>> {
            public queryAllBanks_call(org.apache.thrift.async.AsyncMethodCallback<java.util.List<ThriftBank>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryAllBanks", org.apache.thrift.protocol.TMessageType.CALL, 0));
                queryAllBanks_args args = new queryAllBanks_args();
                args.write(prot);
                prot.writeMessageEnd();
            }

            public java.util.List<ThriftBank> getResult() throws org.apache.thrift.TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_queryAllBanks();
            }
        }

        public void getBankById(long bankId, org.apache.thrift.async.AsyncMethodCallback<ThriftBank> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getBankById_call method_call = new getBankById_call(bankId, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getBankById_call extends org.apache.thrift.async.TAsyncMethodCall<ThriftBank> {
            private long bankId;

            public getBankById_call(long bankId, org.apache.thrift.async.AsyncMethodCallback<ThriftBank> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.bankId = bankId;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBankById", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getBankById_args args = new getBankById_args();
                args.setBankId(bankId);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public ThriftBank getResult() throws org.apache.thrift.TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getBankById();
            }
        }

        public void queryAllBranchesByRegion(long bankId, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<ThriftRegion, java.util.List<ThriftBranch>>> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            queryAllBranchesByRegion_call method_call = new queryAllBranchesByRegion_call(bankId, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class queryAllBranchesByRegion_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.Map<ThriftRegion, java.util.List<ThriftBranch>>> {
            private long bankId;

            public queryAllBranchesByRegion_call(long bankId, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<ThriftRegion, java.util.List<ThriftBranch>>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.bankId = bankId;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryAllBranchesByRegion", org.apache.thrift.protocol.TMessageType.CALL, 0));
                queryAllBranchesByRegion_args args = new queryAllBranchesByRegion_args();
                args.setBankId(bankId);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public java.util.Map<ThriftRegion, java.util.List<ThriftBranch>> getResult() throws org.apache.thrift.TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_queryAllBranchesByRegion();
            }
        }

    }

    public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
        private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());

        public Processor(I iface) {
            super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
        }

        protected Processor(I iface, java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends Iface> java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            processMap.put("registerNewBank", new registerNewBank());
            processMap.put("queryAllBanks", new queryAllBanks());
            processMap.put("getBankById", new getBankById());
            processMap.put("queryAllBranchesByRegion", new queryAllBranchesByRegion());
            return processMap;
        }

        public static class registerNewBank<I extends Iface> extends org.apache.thrift.ProcessFunction<I, registerNewBank_args> {
            public registerNewBank() {
                super("registerNewBank");
            }

            public registerNewBank_args getEmptyArgsInstance() {
                return new registerNewBank_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public registerNewBank_result getResult(I iface, registerNewBank_args args) throws org.apache.thrift.TException {
                registerNewBank_result result = new registerNewBank_result();
                iface.registerNewBank(args.bank);
                return result;
            }
        }

        public static class queryAllBanks<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryAllBanks_args> {
            public queryAllBanks() {
                super("queryAllBanks");
            }

            public queryAllBanks_args getEmptyArgsInstance() {
                return new queryAllBanks_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public queryAllBanks_result getResult(I iface, queryAllBanks_args args) throws org.apache.thrift.TException {
                queryAllBanks_result result = new queryAllBanks_result();
                result.success = iface.queryAllBanks();
                return result;
            }
        }

        public static class getBankById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getBankById_args> {
            public getBankById() {
                super("getBankById");
            }

            public getBankById_args getEmptyArgsInstance() {
                return new getBankById_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getBankById_result getResult(I iface, getBankById_args args) throws org.apache.thrift.TException {
                getBankById_result result = new getBankById_result();
                result.success = iface.getBankById(args.bankId);
                return result;
            }
        }

        public static class queryAllBranchesByRegion<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryAllBranchesByRegion_args> {
            public queryAllBranchesByRegion() {
                super("queryAllBranchesByRegion");
            }

            public queryAllBranchesByRegion_args getEmptyArgsInstance() {
                return new queryAllBranchesByRegion_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public queryAllBranchesByRegion_result getResult(I iface, queryAllBranchesByRegion_args args) throws org.apache.thrift.TException {
                queryAllBranchesByRegion_result result = new queryAllBranchesByRegion_result();
                result.success = iface.queryAllBranchesByRegion(args.bankId);
                return result;
            }
        }

    }

    public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
        private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());

        public AsyncProcessor(I iface) {
            super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
        }

        protected AsyncProcessor(I iface, java.util.Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends AsyncIface> java.util.Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> getProcessMap(java.util.Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            processMap.put("registerNewBank", new registerNewBank());
            processMap.put("queryAllBanks", new queryAllBanks());
            processMap.put("getBankById", new getBankById());
            processMap.put("queryAllBranchesByRegion", new queryAllBranchesByRegion());
            return processMap;
        }

        public static class registerNewBank<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, registerNewBank_args, Void> {
            public registerNewBank() {
                super("registerNewBank");
            }

            public registerNewBank_args getEmptyArgsInstance() {
                return new registerNewBank_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        registerNewBank_result result = new registerNewBank_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        registerNewBank_result result = new registerNewBank_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, registerNewBank_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.registerNewBank(args.bank, resultHandler);
            }
        }

        public static class queryAllBanks<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryAllBanks_args, java.util.List<ThriftBank>> {
            public queryAllBanks() {
                super("queryAllBanks");
            }

            public queryAllBanks_args getEmptyArgsInstance() {
                return new queryAllBanks_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<java.util.List<ThriftBank>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<ThriftBank>>() {
                    public void onComplete(java.util.List<ThriftBank> o) {
                        queryAllBanks_result result = new queryAllBanks_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        queryAllBanks_result result = new queryAllBanks_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, queryAllBanks_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<ThriftBank>> resultHandler) throws org.apache.thrift.TException {
                iface.queryAllBanks(resultHandler);
            }
        }

        public static class getBankById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getBankById_args, ThriftBank> {
            public getBankById() {
                super("getBankById");
            }

            public getBankById_args getEmptyArgsInstance() {
                return new getBankById_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<ThriftBank> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<ThriftBank>() {
                    public void onComplete(ThriftBank o) {
                        getBankById_result result = new getBankById_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getBankById_result result = new getBankById_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getBankById_args args, org.apache.thrift.async.AsyncMethodCallback<ThriftBank> resultHandler) throws org.apache.thrift.TException {
                iface.getBankById(args.bankId, resultHandler);
            }
        }

        public static class queryAllBranchesByRegion<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryAllBranchesByRegion_args, java.util.Map<ThriftRegion, java.util.List<ThriftBranch>>> {
            public queryAllBranchesByRegion() {
                super("queryAllBranchesByRegion");
            }

            public queryAllBranchesByRegion_args getEmptyArgsInstance() {
                return new queryAllBranchesByRegion_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<java.util.Map<ThriftRegion, java.util.List<ThriftBranch>>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<java.util.Map<ThriftRegion, java.util.List<ThriftBranch>>>() {
                    public void onComplete(java.util.Map<ThriftRegion, java.util.List<ThriftBranch>> o) {
                        queryAllBranchesByRegion_result result = new queryAllBranchesByRegion_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        queryAllBranchesByRegion_result result = new queryAllBranchesByRegion_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, queryAllBranchesByRegion_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<ThriftRegion, java.util.List<ThriftBranch>>> resultHandler) throws org.apache.thrift.TException {
                iface.queryAllBranchesByRegion(args.bankId, resultHandler);
            }
        }

    }

    public static class registerNewBank_args implements org.apache.thrift.TBase<registerNewBank_args, registerNewBank_args._Fields>, java.io.Serializable, Cloneable, Comparable<registerNewBank_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerNewBank_args");

        private static final org.apache.thrift.protocol.TField BANK_FIELD_DESC = new org.apache.thrift.protocol.TField("bank", org.apache.thrift.protocol.TType.STRUCT, (short) -1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new registerNewBank_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new registerNewBank_argsTupleSchemeFactory();

        public ThriftBank bank; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            BANK((short) -1, "bank");

            private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case -1: // BANK
                        return BANK;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.BANK, new org.apache.thrift.meta_data.FieldMetaData("bank", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBank.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerNewBank_args.class, metaDataMap);
        }

        public registerNewBank_args() {
        }

        public registerNewBank_args(
                ThriftBank bank) {
            this();
            this.bank = bank;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public registerNewBank_args(registerNewBank_args other) {
            if (other.isSetBank()) {
                this.bank = new ThriftBank(other.bank);
            }
        }

        public registerNewBank_args deepCopy() {
            return new registerNewBank_args(this);
        }

        @Override
        public void clear() {
            this.bank = null;
        }

        public ThriftBank getBank() {
            return this.bank;
        }

        public registerNewBank_args setBank(ThriftBank bank) {
            this.bank = bank;
            return this;
        }

        public void unsetBank() {
            this.bank = null;
        }

        /**
         * Returns true if field bank is set (has been assigned a value) and false otherwise
         */
        public boolean isSetBank() {
            return this.bank != null;
        }

        public void setBankIsSet(boolean value) {
            if (!value) {
                this.bank = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case BANK:
                    if (value == null) {
                        unsetBank();
                    } else {
                        setBank((ThriftBank) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case BANK:
                    return getBank();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case BANK:
                    return isSetBank();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof registerNewBank_args)
                return this.equals((registerNewBank_args) that);
            return false;
        }

        public boolean equals(registerNewBank_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_bank = true && this.isSetBank();
            boolean that_present_bank = true && that.isSetBank();
            if (this_present_bank || that_present_bank) {
                if (!(this_present_bank && that_present_bank))
                    return false;
                if (!this.bank.equals(that.bank))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetBank()) ? 131071 : 524287);
            if (isSetBank())
                hashCode = hashCode * 8191 + bank.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(registerNewBank_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetBank()).compareTo(other.isSetBank());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetBank()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bank, other.bank);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("registerNewBank_args(");
            boolean first = true;

            sb.append("bank:");
            if (this.bank == null) {
                sb.append("null");
            } else {
                sb.append(this.bank);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (bank != null) {
                bank.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class registerNewBank_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public registerNewBank_argsStandardScheme getScheme() {
                return new registerNewBank_argsStandardScheme();
            }
        }

        private static class registerNewBank_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<registerNewBank_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, registerNewBank_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case -1: // BANK
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.bank = new ThriftBank();
                                struct.bank.read(iprot);
                                struct.setBankIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, registerNewBank_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.bank != null) {
                    oprot.writeFieldBegin(BANK_FIELD_DESC);
                    struct.bank.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class registerNewBank_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public registerNewBank_argsTupleScheme getScheme() {
                return new registerNewBank_argsTupleScheme();
            }
        }

        private static class registerNewBank_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<registerNewBank_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, registerNewBank_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetBank()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetBank()) {
                    struct.bank.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, registerNewBank_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.bank = new ThriftBank();
                    struct.bank.read(iprot);
                    struct.setBankIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class registerNewBank_result implements org.apache.thrift.TBase<registerNewBank_result, registerNewBank_result._Fields>, java.io.Serializable, Cloneable, Comparable<registerNewBank_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerNewBank_result");


        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new registerNewBank_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new registerNewBank_resultTupleSchemeFactory();


        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerNewBank_result.class, metaDataMap);
        }

        public registerNewBank_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public registerNewBank_result(registerNewBank_result other) {
        }

        public registerNewBank_result deepCopy() {
            return new registerNewBank_result(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof registerNewBank_result)
                return this.equals((registerNewBank_result) that);
            return false;
        }

        public boolean equals(registerNewBank_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            return hashCode;
        }

        @Override
        public int compareTo(registerNewBank_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("registerNewBank_result(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class registerNewBank_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public registerNewBank_resultStandardScheme getScheme() {
                return new registerNewBank_resultStandardScheme();
            }
        }

        private static class registerNewBank_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<registerNewBank_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, registerNewBank_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, registerNewBank_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class registerNewBank_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public registerNewBank_resultTupleScheme getScheme() {
                return new registerNewBank_resultTupleScheme();
            }
        }

        private static class registerNewBank_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<registerNewBank_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, registerNewBank_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, registerNewBank_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class queryAllBanks_args implements org.apache.thrift.TBase<queryAllBanks_args, queryAllBanks_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryAllBanks_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryAllBanks_args");


        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queryAllBanks_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queryAllBanks_argsTupleSchemeFactory();


        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryAllBanks_args.class, metaDataMap);
        }

        public queryAllBanks_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public queryAllBanks_args(queryAllBanks_args other) {
        }

        public queryAllBanks_args deepCopy() {
            return new queryAllBanks_args(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof queryAllBanks_args)
                return this.equals((queryAllBanks_args) that);
            return false;
        }

        public boolean equals(queryAllBanks_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            return hashCode;
        }

        @Override
        public int compareTo(queryAllBanks_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("queryAllBanks_args(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class queryAllBanks_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryAllBanks_argsStandardScheme getScheme() {
                return new queryAllBanks_argsStandardScheme();
            }
        }

        private static class queryAllBanks_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<queryAllBanks_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, queryAllBanks_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, queryAllBanks_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class queryAllBanks_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryAllBanks_argsTupleScheme getScheme() {
                return new queryAllBanks_argsTupleScheme();
            }
        }

        private static class queryAllBanks_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<queryAllBanks_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, queryAllBanks_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, queryAllBanks_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class queryAllBanks_result implements org.apache.thrift.TBase<queryAllBanks_result, queryAllBanks_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryAllBanks_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryAllBanks_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short) 0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queryAllBanks_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queryAllBanks_resultTupleSchemeFactory();

        public java.util.List<ThriftBank> success; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBank.class))));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryAllBanks_result.class, metaDataMap);
        }

        public queryAllBanks_result() {
        }

        public queryAllBanks_result(
                java.util.List<ThriftBank> success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public queryAllBanks_result(queryAllBanks_result other) {
            if (other.isSetSuccess()) {
                java.util.List<ThriftBank> __this__success = new java.util.ArrayList<ThriftBank>(other.success.size());
                for (ThriftBank other_element : other.success) {
                    __this__success.add(new ThriftBank(other_element));
                }
                this.success = __this__success;
            }
        }

        public queryAllBanks_result deepCopy() {
            return new queryAllBanks_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public java.util.Iterator<ThriftBank> getSuccessIterator() {
            return (this.success == null) ? null : this.success.iterator();
        }

        public void addToSuccess(ThriftBank elem) {
            if (this.success == null) {
                this.success = new java.util.ArrayList<ThriftBank>();
            }
            this.success.add(elem);
        }

        public java.util.List<ThriftBank> getSuccess() {
            return this.success;
        }

        public queryAllBanks_result setSuccess(java.util.List<ThriftBank> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((java.util.List<ThriftBank>) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof queryAllBanks_result)
                return this.equals((queryAllBanks_result) that);
            return false;
        }

        public boolean equals(queryAllBanks_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(queryAllBanks_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("queryAllBanks_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class queryAllBanks_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryAllBanks_resultStandardScheme getScheme() {
                return new queryAllBanks_resultStandardScheme();
            }
        }

        private static class queryAllBanks_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<queryAllBanks_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, queryAllBanks_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list50 = iprot.readListBegin();
                                    struct.success = new java.util.ArrayList<ThriftBank>(_list50.size);
                                    ThriftBank _elem51;
                                    for (int _i52 = 0; _i52 < _list50.size; ++_i52) {
                                        _elem51 = new ThriftBank();
                                        _elem51.read(iprot);
                                        struct.success.add(_elem51);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, queryAllBanks_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
                        for (ThriftBank _iter53 : struct.success) {
                            _iter53.write(oprot);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class queryAllBanks_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryAllBanks_resultTupleScheme getScheme() {
                return new queryAllBanks_resultTupleScheme();
            }
        }

        private static class queryAllBanks_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<queryAllBanks_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, queryAllBanks_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (ThriftBank _iter54 : struct.success) {
                            _iter54.write(oprot);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, queryAllBanks_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list55 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                        struct.success = new java.util.ArrayList<ThriftBank>(_list55.size);
                        ThriftBank _elem56;
                        for (int _i57 = 0; _i57 < _list55.size; ++_i57) {
                            _elem56 = new ThriftBank();
                            _elem56.read(iprot);
                            struct.success.add(_elem56);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getBankById_args implements org.apache.thrift.TBase<getBankById_args, getBankById_args._Fields>, java.io.Serializable, Cloneable, Comparable<getBankById_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBankById_args");

        private static final org.apache.thrift.protocol.TField BANK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("bankId", org.apache.thrift.protocol.TType.I64, (short) -1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getBankById_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getBankById_argsTupleSchemeFactory();

        public long bankId; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            BANK_ID((short) -1, "bankId");

            private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case -1: // BANK_ID
                        return BANK_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __BANKID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.BANK_ID, new org.apache.thrift.meta_data.FieldMetaData("bankId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBankById_args.class, metaDataMap);
        }

        public getBankById_args() {
        }

        public getBankById_args(
                long bankId) {
            this();
            this.bankId = bankId;
            setBankIdIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getBankById_args(getBankById_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.bankId = other.bankId;
        }

        public getBankById_args deepCopy() {
            return new getBankById_args(this);
        }

        @Override
        public void clear() {
            setBankIdIsSet(false);
            this.bankId = 0;
        }

        public long getBankId() {
            return this.bankId;
        }

        public getBankById_args setBankId(long bankId) {
            this.bankId = bankId;
            setBankIdIsSet(true);
            return this;
        }

        public void unsetBankId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BANKID_ISSET_ID);
        }

        /**
         * Returns true if field bankId is set (has been assigned a value) and false otherwise
         */
        public boolean isSetBankId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BANKID_ISSET_ID);
        }

        public void setBankIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BANKID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case BANK_ID:
                    if (value == null) {
                        unsetBankId();
                    } else {
                        setBankId((Long) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case BANK_ID:
                    return getBankId();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case BANK_ID:
                    return isSetBankId();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getBankById_args)
                return this.equals((getBankById_args) that);
            return false;
        }

        public boolean equals(getBankById_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_bankId = true;
            boolean that_present_bankId = true;
            if (this_present_bankId || that_present_bankId) {
                if (!(this_present_bankId && that_present_bankId))
                    return false;
                if (this.bankId != that.bankId)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(bankId);

            return hashCode;
        }

        @Override
        public int compareTo(getBankById_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetBankId()).compareTo(other.isSetBankId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetBankId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankId, other.bankId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getBankById_args(");
            boolean first = true;

            sb.append("bankId:");
            sb.append(this.bankId);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getBankById_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getBankById_argsStandardScheme getScheme() {
                return new getBankById_argsStandardScheme();
            }
        }

        private static class getBankById_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getBankById_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getBankById_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case -1: // BANK_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.bankId = iprot.readI64();
                                struct.setBankIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getBankById_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(BANK_ID_FIELD_DESC);
                oprot.writeI64(struct.bankId);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getBankById_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getBankById_argsTupleScheme getScheme() {
                return new getBankById_argsTupleScheme();
            }
        }

        private static class getBankById_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getBankById_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getBankById_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetBankId()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetBankId()) {
                    oprot.writeI64(struct.bankId);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getBankById_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.bankId = iprot.readI64();
                    struct.setBankIdIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getBankById_result implements org.apache.thrift.TBase<getBankById_result, getBankById_result._Fields>, java.io.Serializable, Cloneable, Comparable<getBankById_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBankById_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getBankById_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getBankById_resultTupleSchemeFactory();

        public ThriftBank success; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBank.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBankById_result.class, metaDataMap);
        }

        public getBankById_result() {
        }

        public getBankById_result(
                ThriftBank success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getBankById_result(getBankById_result other) {
            if (other.isSetSuccess()) {
                this.success = new ThriftBank(other.success);
            }
        }

        public getBankById_result deepCopy() {
            return new getBankById_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public ThriftBank getSuccess() {
            return this.success;
        }

        public getBankById_result setSuccess(ThriftBank success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((ThriftBank) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getBankById_result)
                return this.equals((getBankById_result) that);
            return false;
        }

        public boolean equals(getBankById_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getBankById_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getBankById_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getBankById_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getBankById_resultStandardScheme getScheme() {
                return new getBankById_resultStandardScheme();
            }
        }

        private static class getBankById_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getBankById_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getBankById_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new ThriftBank();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getBankById_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getBankById_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getBankById_resultTupleScheme getScheme() {
                return new getBankById_resultTupleScheme();
            }
        }

        private static class getBankById_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getBankById_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getBankById_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getBankById_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new ThriftBank();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class queryAllBranchesByRegion_args implements org.apache.thrift.TBase<queryAllBranchesByRegion_args, queryAllBranchesByRegion_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryAllBranchesByRegion_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryAllBranchesByRegion_args");

        private static final org.apache.thrift.protocol.TField BANK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("bankId", org.apache.thrift.protocol.TType.I64, (short) -1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queryAllBranchesByRegion_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queryAllBranchesByRegion_argsTupleSchemeFactory();

        public long bankId; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            BANK_ID((short) -1, "bankId");

            private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case -1: // BANK_ID
                        return BANK_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __BANKID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.BANK_ID, new org.apache.thrift.meta_data.FieldMetaData("bankId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryAllBranchesByRegion_args.class, metaDataMap);
        }

        public queryAllBranchesByRegion_args() {
        }

        public queryAllBranchesByRegion_args(
                long bankId) {
            this();
            this.bankId = bankId;
            setBankIdIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public queryAllBranchesByRegion_args(queryAllBranchesByRegion_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.bankId = other.bankId;
        }

        public queryAllBranchesByRegion_args deepCopy() {
            return new queryAllBranchesByRegion_args(this);
        }

        @Override
        public void clear() {
            setBankIdIsSet(false);
            this.bankId = 0;
        }

        public long getBankId() {
            return this.bankId;
        }

        public queryAllBranchesByRegion_args setBankId(long bankId) {
            this.bankId = bankId;
            setBankIdIsSet(true);
            return this;
        }

        public void unsetBankId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BANKID_ISSET_ID);
        }

        /**
         * Returns true if field bankId is set (has been assigned a value) and false otherwise
         */
        public boolean isSetBankId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BANKID_ISSET_ID);
        }

        public void setBankIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BANKID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case BANK_ID:
                    if (value == null) {
                        unsetBankId();
                    } else {
                        setBankId((Long) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case BANK_ID:
                    return getBankId();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case BANK_ID:
                    return isSetBankId();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof queryAllBranchesByRegion_args)
                return this.equals((queryAllBranchesByRegion_args) that);
            return false;
        }

        public boolean equals(queryAllBranchesByRegion_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_bankId = true;
            boolean that_present_bankId = true;
            if (this_present_bankId || that_present_bankId) {
                if (!(this_present_bankId && that_present_bankId))
                    return false;
                if (this.bankId != that.bankId)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(bankId);

            return hashCode;
        }

        @Override
        public int compareTo(queryAllBranchesByRegion_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetBankId()).compareTo(other.isSetBankId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetBankId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankId, other.bankId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("queryAllBranchesByRegion_args(");
            boolean first = true;

            sb.append("bankId:");
            sb.append(this.bankId);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class queryAllBranchesByRegion_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryAllBranchesByRegion_argsStandardScheme getScheme() {
                return new queryAllBranchesByRegion_argsStandardScheme();
            }
        }

        private static class queryAllBranchesByRegion_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<queryAllBranchesByRegion_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, queryAllBranchesByRegion_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case -1: // BANK_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.bankId = iprot.readI64();
                                struct.setBankIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, queryAllBranchesByRegion_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(BANK_ID_FIELD_DESC);
                oprot.writeI64(struct.bankId);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class queryAllBranchesByRegion_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryAllBranchesByRegion_argsTupleScheme getScheme() {
                return new queryAllBranchesByRegion_argsTupleScheme();
            }
        }

        private static class queryAllBranchesByRegion_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<queryAllBranchesByRegion_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, queryAllBranchesByRegion_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetBankId()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetBankId()) {
                    oprot.writeI64(struct.bankId);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, queryAllBranchesByRegion_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.bankId = iprot.readI64();
                    struct.setBankIdIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class queryAllBranchesByRegion_result implements org.apache.thrift.TBase<queryAllBranchesByRegion_result, queryAllBranchesByRegion_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryAllBranchesByRegion_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryAllBranchesByRegion_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short) 0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queryAllBranchesByRegion_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queryAllBranchesByRegion_resultTupleSchemeFactory();

        public java.util.Map<ThriftRegion, java.util.List<ThriftBranch>> success; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ThriftRegion.class),
                            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBranch.class)))));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryAllBranchesByRegion_result.class, metaDataMap);
        }

        public queryAllBranchesByRegion_result() {
        }

        public queryAllBranchesByRegion_result(
                java.util.Map<ThriftRegion, java.util.List<ThriftBranch>> success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public queryAllBranchesByRegion_result(queryAllBranchesByRegion_result other) {
            if (other.isSetSuccess()) {
                java.util.Map<ThriftRegion, java.util.List<ThriftBranch>> __this__success = new java.util.HashMap<ThriftRegion, java.util.List<ThriftBranch>>(other.success.size());
                for (java.util.Map.Entry<ThriftRegion, java.util.List<ThriftBranch>> other_element : other.success.entrySet()) {

                    ThriftRegion other_element_key = other_element.getKey();
                    java.util.List<ThriftBranch> other_element_value = other_element.getValue();

                    ThriftRegion __this__success_copy_key = other_element_key;

                    java.util.List<ThriftBranch> __this__success_copy_value = new java.util.ArrayList<ThriftBranch>(other_element_value.size());
                    for (ThriftBranch other_element_value_element : other_element_value) {
                        __this__success_copy_value.add(new ThriftBranch(other_element_value_element));
                    }

                    __this__success.put(__this__success_copy_key, __this__success_copy_value);
                }
                this.success = __this__success;
            }
        }

        public queryAllBranchesByRegion_result deepCopy() {
            return new queryAllBranchesByRegion_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public void putToSuccess(ThriftRegion key, java.util.List<ThriftBranch> val) {
            if (this.success == null) {
                this.success = new java.util.HashMap<ThriftRegion, java.util.List<ThriftBranch>>();
            }
            this.success.put(key, val);
        }

        public java.util.Map<ThriftRegion, java.util.List<ThriftBranch>> getSuccess() {
            return this.success;
        }

        public queryAllBranchesByRegion_result setSuccess(java.util.Map<ThriftRegion, java.util.List<ThriftBranch>> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((java.util.Map<ThriftRegion, java.util.List<ThriftBranch>>) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof queryAllBranchesByRegion_result)
                return this.equals((queryAllBranchesByRegion_result) that);
            return false;
        }

        public boolean equals(queryAllBranchesByRegion_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(queryAllBranchesByRegion_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("queryAllBranchesByRegion_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class queryAllBranchesByRegion_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryAllBranchesByRegion_resultStandardScheme getScheme() {
                return new queryAllBranchesByRegion_resultStandardScheme();
            }
        }

        private static class queryAllBranchesByRegion_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<queryAllBranchesByRegion_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, queryAllBranchesByRegion_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                                {
                                    org.apache.thrift.protocol.TMap _map58 = iprot.readMapBegin();
                                    struct.success = new java.util.HashMap<ThriftRegion, java.util.List<ThriftBranch>>(2 * _map58.size);
                                    ThriftRegion _key59;
                                    java.util.List<ThriftBranch> _val60;
                                    for (int _i61 = 0; _i61 < _map58.size; ++_i61) {
                                        _key59 = ThriftRegion.findByValue(iprot.readI32());
                                        {
                                            org.apache.thrift.protocol.TList _list62 = iprot.readListBegin();
                                            _val60 = new java.util.ArrayList<ThriftBranch>(_list62.size);
                                            ThriftBranch _elem63;
                                            for (int _i64 = 0; _i64 < _list62.size; ++_i64) {
                                                _elem63 = new ThriftBranch();
                                                _elem63.read(iprot);
                                                _val60.add(_elem63);
                                            }
                                            iprot.readListEnd();
                                        }
                                        struct.success.put(_key59, _val60);
                                    }
                                    iprot.readMapEnd();
                                }
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, queryAllBranchesByRegion_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.LIST, struct.success.size()));
                        for (java.util.Map.Entry<ThriftRegion, java.util.List<ThriftBranch>> _iter65 : struct.success.entrySet()) {
                            oprot.writeI32(_iter65.getKey().getValue());
                            {
                                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter65.getValue().size()));
                                for (ThriftBranch _iter66 : _iter65.getValue()) {
                                    _iter66.write(oprot);
                                }
                                oprot.writeListEnd();
                            }
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class queryAllBranchesByRegion_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryAllBranchesByRegion_resultTupleScheme getScheme() {
                return new queryAllBranchesByRegion_resultTupleScheme();
            }
        }

        private static class queryAllBranchesByRegion_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<queryAllBranchesByRegion_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, queryAllBranchesByRegion_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (java.util.Map.Entry<ThriftRegion, java.util.List<ThriftBranch>> _iter67 : struct.success.entrySet()) {
                            oprot.writeI32(_iter67.getKey().getValue());
                            {
                                oprot.writeI32(_iter67.getValue().size());
                                for (ThriftBranch _iter68 : _iter67.getValue()) {
                                    _iter68.write(oprot);
                                }
                            }
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, queryAllBranchesByRegion_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TMap _map69 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
                        struct.success = new java.util.HashMap<ThriftRegion, java.util.List<ThriftBranch>>(2 * _map69.size);
                        ThriftRegion _key70;
                        java.util.List<ThriftBranch> _val71;
                        for (int _i72 = 0; _i72 < _map69.size; ++_i72) {
                            _key70 = ThriftRegion.findByValue(iprot.readI32());
                            {
                                org.apache.thrift.protocol.TList _list73 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                                _val71 = new java.util.ArrayList<ThriftBranch>(_list73.size);
                                ThriftBranch _elem74;
                                for (int _i75 = 0; _i75 < _list73.size; ++_i75) {
                                    _elem74 = new ThriftBranch();
                                    _elem74.read(iprot);
                                    _val71.add(_elem74);
                                }
                            }
                            struct.success.put(_key70, _val71);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

}
