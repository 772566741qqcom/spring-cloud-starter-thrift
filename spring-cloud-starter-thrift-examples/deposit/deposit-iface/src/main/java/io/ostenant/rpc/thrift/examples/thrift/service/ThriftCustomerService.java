/**
 * Autogenerated by Thrift Compiler (0.10.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package io.ostenant.rpc.thrift.examples.thrift.service;


import io.ostenant.rpc.thrift.examples.thrift.entities.ThriftCustomer;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-11-22")
public class ThriftCustomerService {

    public interface Iface {

        public ThriftCustomer getCustomerById(String customerId) throws org.apache.thrift.TException;

        public java.util.List<ThriftCustomer> queryAllCustomers() throws org.apache.thrift.TException;

        public void addNewUser(ThriftCustomer customer) throws org.apache.thrift.TException;

        public void modifyUserById(String customerId, ThriftCustomer customer) throws org.apache.thrift.TException;

        public int getTotalDepositCard(String customerId) throws org.apache.thrift.TException;

    }

    public interface AsyncIface {

        public void getCustomerById(String customerId, org.apache.thrift.async.AsyncMethodCallback<ThriftCustomer> resultHandler) throws org.apache.thrift.TException;

        public void queryAllCustomers(org.apache.thrift.async.AsyncMethodCallback<java.util.List<ThriftCustomer>> resultHandler) throws org.apache.thrift.TException;

        public void addNewUser(ThriftCustomer customer, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void modifyUserById(String customerId, ThriftCustomer customer, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void getTotalDepositCard(String customerId, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws org.apache.thrift.TException;

    }

    public static class Client extends org.apache.thrift.TServiceClient implements Iface {
        public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
            public Factory() {
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
                return new Client(prot);
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
                return new Client(iprot, oprot);
            }
        }

        public Client(org.apache.thrift.protocol.TProtocol prot) {
            super(prot, prot);
        }

        public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
            super(iprot, oprot);
        }

        public ThriftCustomer getCustomerById(String customerId) throws org.apache.thrift.TException {
            send_getCustomerById(customerId);
            return recv_getCustomerById();
        }

        public void send_getCustomerById(String customerId) throws org.apache.thrift.TException {
            getCustomerById_args args = new getCustomerById_args();
            args.setCustomerId(customerId);
            sendBase("getCustomerById", args);
        }

        public ThriftCustomer recv_getCustomerById() throws org.apache.thrift.TException {
            getCustomerById_result result = new getCustomerById_result();
            receiveBase(result, "getCustomerById");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCustomerById failed: unknown result");
        }

        public java.util.List<ThriftCustomer> queryAllCustomers() throws org.apache.thrift.TException {
            send_queryAllCustomers();
            return recv_queryAllCustomers();
        }

        public void send_queryAllCustomers() throws org.apache.thrift.TException {
            queryAllCustomers_args args = new queryAllCustomers_args();
            sendBase("queryAllCustomers", args);
        }

        public java.util.List<ThriftCustomer> recv_queryAllCustomers() throws org.apache.thrift.TException {
            queryAllCustomers_result result = new queryAllCustomers_result();
            receiveBase(result, "queryAllCustomers");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryAllCustomers failed: unknown result");
        }

        public void addNewUser(ThriftCustomer customer) throws org.apache.thrift.TException {
            send_addNewUser(customer);
            recv_addNewUser();
        }

        public void send_addNewUser(ThriftCustomer customer) throws org.apache.thrift.TException {
            addNewUser_args args = new addNewUser_args();
            args.setCustomer(customer);
            sendBase("addNewUser", args);
        }

        public void recv_addNewUser() throws org.apache.thrift.TException {
            addNewUser_result result = new addNewUser_result();
            receiveBase(result, "addNewUser");
            return;
        }

        public void modifyUserById(String customerId, ThriftCustomer customer) throws org.apache.thrift.TException {
            send_modifyUserById(customerId, customer);
            recv_modifyUserById();
        }

        public void send_modifyUserById(String customerId, ThriftCustomer customer) throws org.apache.thrift.TException {
            modifyUserById_args args = new modifyUserById_args();
            args.setCustomerId(customerId);
            args.setCustomer(customer);
            sendBase("modifyUserById", args);
        }

        public void recv_modifyUserById() throws org.apache.thrift.TException {
            modifyUserById_result result = new modifyUserById_result();
            receiveBase(result, "modifyUserById");
            return;
        }

        public int getTotalDepositCard(String customerId) throws org.apache.thrift.TException {
            send_getTotalDepositCard(customerId);
            return recv_getTotalDepositCard();
        }

        public void send_getTotalDepositCard(String customerId) throws org.apache.thrift.TException {
            getTotalDepositCard_args args = new getTotalDepositCard_args();
            args.setCustomerId(customerId);
            sendBase("getTotalDepositCard", args);
        }

        public int recv_getTotalDepositCard() throws org.apache.thrift.TException {
            getTotalDepositCard_result result = new getTotalDepositCard_result();
            receiveBase(result, "getTotalDepositCard");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTotalDepositCard failed: unknown result");
        }

    }

    public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
        public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
            private org.apache.thrift.async.TAsyncClientManager clientManager;
            private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

            public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
                this.clientManager = clientManager;
                this.protocolFactory = protocolFactory;
            }

            public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
                return new AsyncClient(protocolFactory, clientManager, transport);
            }
        }

        public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
            super(protocolFactory, clientManager, transport);
        }

        public void getCustomerById(String customerId, org.apache.thrift.async.AsyncMethodCallback<ThriftCustomer> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getCustomerById_call method_call = new getCustomerById_call(customerId, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getCustomerById_call extends org.apache.thrift.async.TAsyncMethodCall<ThriftCustomer> {
            private String customerId;

            public getCustomerById_call(String customerId, org.apache.thrift.async.AsyncMethodCallback<ThriftCustomer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.customerId = customerId;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCustomerById", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getCustomerById_args args = new getCustomerById_args();
                args.setCustomerId(customerId);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public ThriftCustomer getResult() throws org.apache.thrift.TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getCustomerById();
            }
        }

        public void queryAllCustomers(org.apache.thrift.async.AsyncMethodCallback<java.util.List<ThriftCustomer>> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            queryAllCustomers_call method_call = new queryAllCustomers_call(resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class queryAllCustomers_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<ThriftCustomer>> {
            public queryAllCustomers_call(org.apache.thrift.async.AsyncMethodCallback<java.util.List<ThriftCustomer>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryAllCustomers", org.apache.thrift.protocol.TMessageType.CALL, 0));
                queryAllCustomers_args args = new queryAllCustomers_args();
                args.write(prot);
                prot.writeMessageEnd();
            }

            public java.util.List<ThriftCustomer> getResult() throws org.apache.thrift.TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_queryAllCustomers();
            }
        }

        public void addNewUser(ThriftCustomer customer, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            addNewUser_call method_call = new addNewUser_call(customer, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class addNewUser_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private ThriftCustomer customer;

            public addNewUser_call(ThriftCustomer customer, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.customer = customer;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addNewUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
                addNewUser_args args = new addNewUser_args();
                args.setCustomer(customer);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws org.apache.thrift.TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void modifyUserById(String customerId, ThriftCustomer customer, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            modifyUserById_call method_call = new modifyUserById_call(customerId, customer, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class modifyUserById_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private String customerId;
            private ThriftCustomer customer;

            public modifyUserById_call(String customerId, ThriftCustomer customer, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.customerId = customerId;
                this.customer = customer;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("modifyUserById", org.apache.thrift.protocol.TMessageType.CALL, 0));
                modifyUserById_args args = new modifyUserById_args();
                args.setCustomerId(customerId);
                args.setCustomer(customer);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws org.apache.thrift.TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void getTotalDepositCard(String customerId, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getTotalDepositCard_call method_call = new getTotalDepositCard_call(customerId, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getTotalDepositCard_call extends org.apache.thrift.async.TAsyncMethodCall<Integer> {
            private String customerId;

            public getTotalDepositCard_call(String customerId, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.customerId = customerId;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTotalDepositCard", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getTotalDepositCard_args args = new getTotalDepositCard_args();
                args.setCustomerId(customerId);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Integer getResult() throws org.apache.thrift.TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getTotalDepositCard();
            }
        }

    }

    public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
        private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());

        public Processor(I iface) {
            super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
        }

        protected Processor(I iface, java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends Iface> java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            processMap.put("getCustomerById", new getCustomerById());
            processMap.put("queryAllCustomers", new queryAllCustomers());
            processMap.put("addNewUser", new addNewUser());
            processMap.put("modifyUserById", new modifyUserById());
            processMap.put("getTotalDepositCard", new getTotalDepositCard());
            return processMap;
        }

        public static class getCustomerById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCustomerById_args> {
            public getCustomerById() {
                super("getCustomerById");
            }

            public getCustomerById_args getEmptyArgsInstance() {
                return new getCustomerById_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getCustomerById_result getResult(I iface, getCustomerById_args args) throws org.apache.thrift.TException {
                getCustomerById_result result = new getCustomerById_result();
                result.success = iface.getCustomerById(args.customerId);
                return result;
            }
        }

        public static class queryAllCustomers<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryAllCustomers_args> {
            public queryAllCustomers() {
                super("queryAllCustomers");
            }

            public queryAllCustomers_args getEmptyArgsInstance() {
                return new queryAllCustomers_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public queryAllCustomers_result getResult(I iface, queryAllCustomers_args args) throws org.apache.thrift.TException {
                queryAllCustomers_result result = new queryAllCustomers_result();
                result.success = iface.queryAllCustomers();
                return result;
            }
        }

        public static class addNewUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addNewUser_args> {
            public addNewUser() {
                super("addNewUser");
            }

            public addNewUser_args getEmptyArgsInstance() {
                return new addNewUser_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public addNewUser_result getResult(I iface, addNewUser_args args) throws org.apache.thrift.TException {
                addNewUser_result result = new addNewUser_result();
                iface.addNewUser(args.customer);
                return result;
            }
        }

        public static class modifyUserById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, modifyUserById_args> {
            public modifyUserById() {
                super("modifyUserById");
            }

            public modifyUserById_args getEmptyArgsInstance() {
                return new modifyUserById_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public modifyUserById_result getResult(I iface, modifyUserById_args args) throws org.apache.thrift.TException {
                modifyUserById_result result = new modifyUserById_result();
                iface.modifyUserById(args.customerId, args.customer);
                return result;
            }
        }

        public static class getTotalDepositCard<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTotalDepositCard_args> {
            public getTotalDepositCard() {
                super("getTotalDepositCard");
            }

            public getTotalDepositCard_args getEmptyArgsInstance() {
                return new getTotalDepositCard_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getTotalDepositCard_result getResult(I iface, getTotalDepositCard_args args) throws org.apache.thrift.TException {
                getTotalDepositCard_result result = new getTotalDepositCard_result();
                result.success = iface.getTotalDepositCard(args.customerId);
                result.setSuccessIsSet(true);
                return result;
            }
        }

    }

    public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
        private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());

        public AsyncProcessor(I iface) {
            super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
        }

        protected AsyncProcessor(I iface, java.util.Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends AsyncIface> java.util.Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> getProcessMap(java.util.Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            processMap.put("getCustomerById", new getCustomerById());
            processMap.put("queryAllCustomers", new queryAllCustomers());
            processMap.put("addNewUser", new addNewUser());
            processMap.put("modifyUserById", new modifyUserById());
            processMap.put("getTotalDepositCard", new getTotalDepositCard());
            return processMap;
        }

        public static class getCustomerById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCustomerById_args, ThriftCustomer> {
            public getCustomerById() {
                super("getCustomerById");
            }

            public getCustomerById_args getEmptyArgsInstance() {
                return new getCustomerById_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<ThriftCustomer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<ThriftCustomer>() {
                    public void onComplete(ThriftCustomer o) {
                        getCustomerById_result result = new getCustomerById_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getCustomerById_result result = new getCustomerById_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getCustomerById_args args, org.apache.thrift.async.AsyncMethodCallback<ThriftCustomer> resultHandler) throws org.apache.thrift.TException {
                iface.getCustomerById(args.customerId, resultHandler);
            }
        }

        public static class queryAllCustomers<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryAllCustomers_args, java.util.List<ThriftCustomer>> {
            public queryAllCustomers() {
                super("queryAllCustomers");
            }

            public queryAllCustomers_args getEmptyArgsInstance() {
                return new queryAllCustomers_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<java.util.List<ThriftCustomer>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<ThriftCustomer>>() {
                    public void onComplete(java.util.List<ThriftCustomer> o) {
                        queryAllCustomers_result result = new queryAllCustomers_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        queryAllCustomers_result result = new queryAllCustomers_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, queryAllCustomers_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<ThriftCustomer>> resultHandler) throws org.apache.thrift.TException {
                iface.queryAllCustomers(resultHandler);
            }
        }

        public static class addNewUser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addNewUser_args, Void> {
            public addNewUser() {
                super("addNewUser");
            }

            public addNewUser_args getEmptyArgsInstance() {
                return new addNewUser_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        addNewUser_result result = new addNewUser_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        addNewUser_result result = new addNewUser_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, addNewUser_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.addNewUser(args.customer, resultHandler);
            }
        }

        public static class modifyUserById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, modifyUserById_args, Void> {
            public modifyUserById() {
                super("modifyUserById");
            }

            public modifyUserById_args getEmptyArgsInstance() {
                return new modifyUserById_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        modifyUserById_result result = new modifyUserById_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        modifyUserById_result result = new modifyUserById_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, modifyUserById_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.modifyUserById(args.customerId, args.customer, resultHandler);
            }
        }

        public static class getTotalDepositCard<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTotalDepositCard_args, Integer> {
            public getTotalDepositCard() {
                super("getTotalDepositCard");
            }

            public getTotalDepositCard_args getEmptyArgsInstance() {
                return new getTotalDepositCard_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Integer>() {
                    public void onComplete(Integer o) {
                        getTotalDepositCard_result result = new getTotalDepositCard_result();
                        result.success = o;
                        result.setSuccessIsSet(true);
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getTotalDepositCard_result result = new getTotalDepositCard_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getTotalDepositCard_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws org.apache.thrift.TException {
                iface.getTotalDepositCard(args.customerId, resultHandler);
            }
        }

    }

    public static class getCustomerById_args implements org.apache.thrift.TBase<getCustomerById_args, getCustomerById_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCustomerById_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCustomerById_args");

        private static final org.apache.thrift.protocol.TField CUSTOMER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("customerId", org.apache.thrift.protocol.TType.STRING, (short) -1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCustomerById_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCustomerById_argsTupleSchemeFactory();

        public String customerId; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            CUSTOMER_ID((short) -1, "customerId");

            private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case -1: // CUSTOMER_ID
                        return CUSTOMER_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.CUSTOMER_ID, new org.apache.thrift.meta_data.FieldMetaData("customerId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCustomerById_args.class, metaDataMap);
        }

        public getCustomerById_args() {
        }

        public getCustomerById_args(
                String customerId) {
            this();
            this.customerId = customerId;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getCustomerById_args(getCustomerById_args other) {
            if (other.isSetCustomerId()) {
                this.customerId = other.customerId;
            }
        }

        public getCustomerById_args deepCopy() {
            return new getCustomerById_args(this);
        }

        @Override
        public void clear() {
            this.customerId = null;
        }

        public String getCustomerId() {
            return this.customerId;
        }

        public getCustomerById_args setCustomerId(String customerId) {
            this.customerId = customerId;
            return this;
        }

        public void unsetCustomerId() {
            this.customerId = null;
        }

        /**
         * Returns true if field customerId is set (has been assigned a value) and false otherwise
         */
        public boolean isSetCustomerId() {
            return this.customerId != null;
        }

        public void setCustomerIdIsSet(boolean value) {
            if (!value) {
                this.customerId = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case CUSTOMER_ID:
                    if (value == null) {
                        unsetCustomerId();
                    } else {
                        setCustomerId((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case CUSTOMER_ID:
                    return getCustomerId();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case CUSTOMER_ID:
                    return isSetCustomerId();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getCustomerById_args)
                return this.equals((getCustomerById_args) that);
            return false;
        }

        public boolean equals(getCustomerById_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_customerId = true && this.isSetCustomerId();
            boolean that_present_customerId = true && that.isSetCustomerId();
            if (this_present_customerId || that_present_customerId) {
                if (!(this_present_customerId && that_present_customerId))
                    return false;
                if (!this.customerId.equals(that.customerId))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetCustomerId()) ? 131071 : 524287);
            if (isSetCustomerId())
                hashCode = hashCode * 8191 + customerId.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getCustomerById_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetCustomerId()).compareTo(other.isSetCustomerId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCustomerId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.customerId, other.customerId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getCustomerById_args(");
            boolean first = true;

            sb.append("customerId:");
            if (this.customerId == null) {
                sb.append("null");
            } else {
                sb.append(this.customerId);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getCustomerById_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getCustomerById_argsStandardScheme getScheme() {
                return new getCustomerById_argsStandardScheme();
            }
        }

        private static class getCustomerById_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getCustomerById_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getCustomerById_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case -1: // CUSTOMER_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.customerId = iprot.readString();
                                struct.setCustomerIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getCustomerById_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.customerId != null) {
                    oprot.writeFieldBegin(CUSTOMER_ID_FIELD_DESC);
                    oprot.writeString(struct.customerId);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getCustomerById_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getCustomerById_argsTupleScheme getScheme() {
                return new getCustomerById_argsTupleScheme();
            }
        }

        private static class getCustomerById_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getCustomerById_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getCustomerById_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetCustomerId()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetCustomerId()) {
                    oprot.writeString(struct.customerId);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getCustomerById_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.customerId = iprot.readString();
                    struct.setCustomerIdIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getCustomerById_result implements org.apache.thrift.TBase<getCustomerById_result, getCustomerById_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCustomerById_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCustomerById_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCustomerById_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCustomerById_resultTupleSchemeFactory();

        public ThriftCustomer success; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftCustomer.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCustomerById_result.class, metaDataMap);
        }

        public getCustomerById_result() {
        }

        public getCustomerById_result(
                ThriftCustomer success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getCustomerById_result(getCustomerById_result other) {
            if (other.isSetSuccess()) {
                this.success = new ThriftCustomer(other.success);
            }
        }

        public getCustomerById_result deepCopy() {
            return new getCustomerById_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public ThriftCustomer getSuccess() {
            return this.success;
        }

        public getCustomerById_result setSuccess(ThriftCustomer success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((ThriftCustomer) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getCustomerById_result)
                return this.equals((getCustomerById_result) that);
            return false;
        }

        public boolean equals(getCustomerById_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getCustomerById_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getCustomerById_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getCustomerById_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getCustomerById_resultStandardScheme getScheme() {
                return new getCustomerById_resultStandardScheme();
            }
        }

        private static class getCustomerById_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getCustomerById_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getCustomerById_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new ThriftCustomer();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getCustomerById_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getCustomerById_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getCustomerById_resultTupleScheme getScheme() {
                return new getCustomerById_resultTupleScheme();
            }
        }

        private static class getCustomerById_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getCustomerById_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getCustomerById_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getCustomerById_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new ThriftCustomer();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class queryAllCustomers_args implements org.apache.thrift.TBase<queryAllCustomers_args, queryAllCustomers_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryAllCustomers_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryAllCustomers_args");


        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queryAllCustomers_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queryAllCustomers_argsTupleSchemeFactory();


        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryAllCustomers_args.class, metaDataMap);
        }

        public queryAllCustomers_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public queryAllCustomers_args(queryAllCustomers_args other) {
        }

        public queryAllCustomers_args deepCopy() {
            return new queryAllCustomers_args(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof queryAllCustomers_args)
                return this.equals((queryAllCustomers_args) that);
            return false;
        }

        public boolean equals(queryAllCustomers_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            return hashCode;
        }

        @Override
        public int compareTo(queryAllCustomers_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("queryAllCustomers_args(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class queryAllCustomers_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryAllCustomers_argsStandardScheme getScheme() {
                return new queryAllCustomers_argsStandardScheme();
            }
        }

        private static class queryAllCustomers_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<queryAllCustomers_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, queryAllCustomers_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, queryAllCustomers_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class queryAllCustomers_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryAllCustomers_argsTupleScheme getScheme() {
                return new queryAllCustomers_argsTupleScheme();
            }
        }

        private static class queryAllCustomers_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<queryAllCustomers_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, queryAllCustomers_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, queryAllCustomers_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class queryAllCustomers_result implements org.apache.thrift.TBase<queryAllCustomers_result, queryAllCustomers_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryAllCustomers_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryAllCustomers_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short) 0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queryAllCustomers_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queryAllCustomers_resultTupleSchemeFactory();

        public java.util.List<ThriftCustomer> success; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftCustomer.class))));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryAllCustomers_result.class, metaDataMap);
        }

        public queryAllCustomers_result() {
        }

        public queryAllCustomers_result(
                java.util.List<ThriftCustomer> success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public queryAllCustomers_result(queryAllCustomers_result other) {
            if (other.isSetSuccess()) {
                java.util.List<ThriftCustomer> __this__success = new java.util.ArrayList<ThriftCustomer>(other.success.size());
                for (ThriftCustomer other_element : other.success) {
                    __this__success.add(new ThriftCustomer(other_element));
                }
                this.success = __this__success;
            }
        }

        public queryAllCustomers_result deepCopy() {
            return new queryAllCustomers_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public java.util.Iterator<ThriftCustomer> getSuccessIterator() {
            return (this.success == null) ? null : this.success.iterator();
        }

        public void addToSuccess(ThriftCustomer elem) {
            if (this.success == null) {
                this.success = new java.util.ArrayList<ThriftCustomer>();
            }
            this.success.add(elem);
        }

        public java.util.List<ThriftCustomer> getSuccess() {
            return this.success;
        }

        public queryAllCustomers_result setSuccess(java.util.List<ThriftCustomer> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((java.util.List<ThriftCustomer>) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof queryAllCustomers_result)
                return this.equals((queryAllCustomers_result) that);
            return false;
        }

        public boolean equals(queryAllCustomers_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(queryAllCustomers_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("queryAllCustomers_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class queryAllCustomers_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryAllCustomers_resultStandardScheme getScheme() {
                return new queryAllCustomers_resultStandardScheme();
            }
        }

        private static class queryAllCustomers_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<queryAllCustomers_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, queryAllCustomers_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list84 = iprot.readListBegin();
                                    struct.success = new java.util.ArrayList<ThriftCustomer>(_list84.size);
                                    ThriftCustomer _elem85;
                                    for (int _i86 = 0; _i86 < _list84.size; ++_i86) {
                                        _elem85 = new ThriftCustomer();
                                        _elem85.read(iprot);
                                        struct.success.add(_elem85);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, queryAllCustomers_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
                        for (ThriftCustomer _iter87 : struct.success) {
                            _iter87.write(oprot);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class queryAllCustomers_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryAllCustomers_resultTupleScheme getScheme() {
                return new queryAllCustomers_resultTupleScheme();
            }
        }

        private static class queryAllCustomers_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<queryAllCustomers_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, queryAllCustomers_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (ThriftCustomer _iter88 : struct.success) {
                            _iter88.write(oprot);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, queryAllCustomers_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list89 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                        struct.success = new java.util.ArrayList<ThriftCustomer>(_list89.size);
                        ThriftCustomer _elem90;
                        for (int _i91 = 0; _i91 < _list89.size; ++_i91) {
                            _elem90 = new ThriftCustomer();
                            _elem90.read(iprot);
                            struct.success.add(_elem90);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class addNewUser_args implements org.apache.thrift.TBase<addNewUser_args, addNewUser_args._Fields>, java.io.Serializable, Cloneable, Comparable<addNewUser_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addNewUser_args");

        private static final org.apache.thrift.protocol.TField CUSTOMER_FIELD_DESC = new org.apache.thrift.protocol.TField("customer", org.apache.thrift.protocol.TType.STRUCT, (short) -1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addNewUser_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addNewUser_argsTupleSchemeFactory();

        public ThriftCustomer customer; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            CUSTOMER((short) -1, "customer");

            private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case -1: // CUSTOMER
                        return CUSTOMER;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.CUSTOMER, new org.apache.thrift.meta_data.FieldMetaData("customer", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftCustomer.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addNewUser_args.class, metaDataMap);
        }

        public addNewUser_args() {
        }

        public addNewUser_args(
                ThriftCustomer customer) {
            this();
            this.customer = customer;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public addNewUser_args(addNewUser_args other) {
            if (other.isSetCustomer()) {
                this.customer = new ThriftCustomer(other.customer);
            }
        }

        public addNewUser_args deepCopy() {
            return new addNewUser_args(this);
        }

        @Override
        public void clear() {
            this.customer = null;
        }

        public ThriftCustomer getCustomer() {
            return this.customer;
        }

        public addNewUser_args setCustomer(ThriftCustomer customer) {
            this.customer = customer;
            return this;
        }

        public void unsetCustomer() {
            this.customer = null;
        }

        /**
         * Returns true if field customer is set (has been assigned a value) and false otherwise
         */
        public boolean isSetCustomer() {
            return this.customer != null;
        }

        public void setCustomerIsSet(boolean value) {
            if (!value) {
                this.customer = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case CUSTOMER:
                    if (value == null) {
                        unsetCustomer();
                    } else {
                        setCustomer((ThriftCustomer) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case CUSTOMER:
                    return getCustomer();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case CUSTOMER:
                    return isSetCustomer();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof addNewUser_args)
                return this.equals((addNewUser_args) that);
            return false;
        }

        public boolean equals(addNewUser_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_customer = true && this.isSetCustomer();
            boolean that_present_customer = true && that.isSetCustomer();
            if (this_present_customer || that_present_customer) {
                if (!(this_present_customer && that_present_customer))
                    return false;
                if (!this.customer.equals(that.customer))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetCustomer()) ? 131071 : 524287);
            if (isSetCustomer())
                hashCode = hashCode * 8191 + customer.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(addNewUser_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetCustomer()).compareTo(other.isSetCustomer());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCustomer()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.customer, other.customer);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("addNewUser_args(");
            boolean first = true;

            sb.append("customer:");
            if (this.customer == null) {
                sb.append("null");
            } else {
                sb.append(this.customer);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (customer != null) {
                customer.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class addNewUser_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addNewUser_argsStandardScheme getScheme() {
                return new addNewUser_argsStandardScheme();
            }
        }

        private static class addNewUser_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<addNewUser_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, addNewUser_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case -1: // CUSTOMER
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.customer = new ThriftCustomer();
                                struct.customer.read(iprot);
                                struct.setCustomerIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, addNewUser_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.customer != null) {
                    oprot.writeFieldBegin(CUSTOMER_FIELD_DESC);
                    struct.customer.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class addNewUser_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addNewUser_argsTupleScheme getScheme() {
                return new addNewUser_argsTupleScheme();
            }
        }

        private static class addNewUser_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<addNewUser_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, addNewUser_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetCustomer()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetCustomer()) {
                    struct.customer.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, addNewUser_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.customer = new ThriftCustomer();
                    struct.customer.read(iprot);
                    struct.setCustomerIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class addNewUser_result implements org.apache.thrift.TBase<addNewUser_result, addNewUser_result._Fields>, java.io.Serializable, Cloneable, Comparable<addNewUser_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addNewUser_result");


        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addNewUser_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addNewUser_resultTupleSchemeFactory();


        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addNewUser_result.class, metaDataMap);
        }

        public addNewUser_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public addNewUser_result(addNewUser_result other) {
        }

        public addNewUser_result deepCopy() {
            return new addNewUser_result(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof addNewUser_result)
                return this.equals((addNewUser_result) that);
            return false;
        }

        public boolean equals(addNewUser_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            return hashCode;
        }

        @Override
        public int compareTo(addNewUser_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("addNewUser_result(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class addNewUser_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addNewUser_resultStandardScheme getScheme() {
                return new addNewUser_resultStandardScheme();
            }
        }

        private static class addNewUser_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<addNewUser_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, addNewUser_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, addNewUser_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class addNewUser_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addNewUser_resultTupleScheme getScheme() {
                return new addNewUser_resultTupleScheme();
            }
        }

        private static class addNewUser_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<addNewUser_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, addNewUser_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, addNewUser_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class modifyUserById_args implements org.apache.thrift.TBase<modifyUserById_args, modifyUserById_args._Fields>, java.io.Serializable, Cloneable, Comparable<modifyUserById_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("modifyUserById_args");

        private static final org.apache.thrift.protocol.TField CUSTOMER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("customerId", org.apache.thrift.protocol.TType.STRING, (short) -1);
        private static final org.apache.thrift.protocol.TField CUSTOMER_FIELD_DESC = new org.apache.thrift.protocol.TField("customer", org.apache.thrift.protocol.TType.STRUCT, (short) -2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new modifyUserById_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new modifyUserById_argsTupleSchemeFactory();

        public String customerId; // required
        public ThriftCustomer customer; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            CUSTOMER_ID((short) -1, "customerId"),
            CUSTOMER((short) -2, "customer");

            private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case -1: // CUSTOMER_ID
                        return CUSTOMER_ID;
                    case -2: // CUSTOMER
                        return CUSTOMER;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.CUSTOMER_ID, new org.apache.thrift.meta_data.FieldMetaData("customerId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.CUSTOMER, new org.apache.thrift.meta_data.FieldMetaData("customer", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftCustomer.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(modifyUserById_args.class, metaDataMap);
        }

        public modifyUserById_args() {
        }

        public modifyUserById_args(
                String customerId,
                ThriftCustomer customer) {
            this();
            this.customerId = customerId;
            this.customer = customer;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public modifyUserById_args(modifyUserById_args other) {
            if (other.isSetCustomerId()) {
                this.customerId = other.customerId;
            }
            if (other.isSetCustomer()) {
                this.customer = new ThriftCustomer(other.customer);
            }
        }

        public modifyUserById_args deepCopy() {
            return new modifyUserById_args(this);
        }

        @Override
        public void clear() {
            this.customerId = null;
            this.customer = null;
        }

        public String getCustomerId() {
            return this.customerId;
        }

        public modifyUserById_args setCustomerId(String customerId) {
            this.customerId = customerId;
            return this;
        }

        public void unsetCustomerId() {
            this.customerId = null;
        }

        /**
         * Returns true if field customerId is set (has been assigned a value) and false otherwise
         */
        public boolean isSetCustomerId() {
            return this.customerId != null;
        }

        public void setCustomerIdIsSet(boolean value) {
            if (!value) {
                this.customerId = null;
            }
        }

        public ThriftCustomer getCustomer() {
            return this.customer;
        }

        public modifyUserById_args setCustomer(ThriftCustomer customer) {
            this.customer = customer;
            return this;
        }

        public void unsetCustomer() {
            this.customer = null;
        }

        /**
         * Returns true if field customer is set (has been assigned a value) and false otherwise
         */
        public boolean isSetCustomer() {
            return this.customer != null;
        }

        public void setCustomerIsSet(boolean value) {
            if (!value) {
                this.customer = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case CUSTOMER_ID:
                    if (value == null) {
                        unsetCustomerId();
                    } else {
                        setCustomerId((String) value);
                    }
                    break;

                case CUSTOMER:
                    if (value == null) {
                        unsetCustomer();
                    } else {
                        setCustomer((ThriftCustomer) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case CUSTOMER_ID:
                    return getCustomerId();

                case CUSTOMER:
                    return getCustomer();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case CUSTOMER_ID:
                    return isSetCustomerId();
                case CUSTOMER:
                    return isSetCustomer();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof modifyUserById_args)
                return this.equals((modifyUserById_args) that);
            return false;
        }

        public boolean equals(modifyUserById_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_customerId = true && this.isSetCustomerId();
            boolean that_present_customerId = true && that.isSetCustomerId();
            if (this_present_customerId || that_present_customerId) {
                if (!(this_present_customerId && that_present_customerId))
                    return false;
                if (!this.customerId.equals(that.customerId))
                    return false;
            }

            boolean this_present_customer = true && this.isSetCustomer();
            boolean that_present_customer = true && that.isSetCustomer();
            if (this_present_customer || that_present_customer) {
                if (!(this_present_customer && that_present_customer))
                    return false;
                if (!this.customer.equals(that.customer))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetCustomerId()) ? 131071 : 524287);
            if (isSetCustomerId())
                hashCode = hashCode * 8191 + customerId.hashCode();

            hashCode = hashCode * 8191 + ((isSetCustomer()) ? 131071 : 524287);
            if (isSetCustomer())
                hashCode = hashCode * 8191 + customer.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(modifyUserById_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetCustomerId()).compareTo(other.isSetCustomerId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCustomerId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.customerId, other.customerId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetCustomer()).compareTo(other.isSetCustomer());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCustomer()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.customer, other.customer);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("modifyUserById_args(");
            boolean first = true;

            sb.append("customerId:");
            if (this.customerId == null) {
                sb.append("null");
            } else {
                sb.append(this.customerId);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("customer:");
            if (this.customer == null) {
                sb.append("null");
            } else {
                sb.append(this.customer);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (customer != null) {
                customer.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class modifyUserById_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public modifyUserById_argsStandardScheme getScheme() {
                return new modifyUserById_argsStandardScheme();
            }
        }

        private static class modifyUserById_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<modifyUserById_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, modifyUserById_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case -1: // CUSTOMER_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.customerId = iprot.readString();
                                struct.setCustomerIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case -2: // CUSTOMER
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.customer = new ThriftCustomer();
                                struct.customer.read(iprot);
                                struct.setCustomerIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, modifyUserById_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.customer != null) {
                    oprot.writeFieldBegin(CUSTOMER_FIELD_DESC);
                    struct.customer.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.customerId != null) {
                    oprot.writeFieldBegin(CUSTOMER_ID_FIELD_DESC);
                    oprot.writeString(struct.customerId);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class modifyUserById_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public modifyUserById_argsTupleScheme getScheme() {
                return new modifyUserById_argsTupleScheme();
            }
        }

        private static class modifyUserById_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<modifyUserById_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, modifyUserById_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetCustomerId()) {
                    optionals.set(0);
                }
                if (struct.isSetCustomer()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetCustomerId()) {
                    oprot.writeString(struct.customerId);
                }
                if (struct.isSetCustomer()) {
                    struct.customer.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, modifyUserById_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.customerId = iprot.readString();
                    struct.setCustomerIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.customer = new ThriftCustomer();
                    struct.customer.read(iprot);
                    struct.setCustomerIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class modifyUserById_result implements org.apache.thrift.TBase<modifyUserById_result, modifyUserById_result._Fields>, java.io.Serializable, Cloneable, Comparable<modifyUserById_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("modifyUserById_result");


        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new modifyUserById_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new modifyUserById_resultTupleSchemeFactory();


        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(modifyUserById_result.class, metaDataMap);
        }

        public modifyUserById_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public modifyUserById_result(modifyUserById_result other) {
        }

        public modifyUserById_result deepCopy() {
            return new modifyUserById_result(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof modifyUserById_result)
                return this.equals((modifyUserById_result) that);
            return false;
        }

        public boolean equals(modifyUserById_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            return hashCode;
        }

        @Override
        public int compareTo(modifyUserById_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("modifyUserById_result(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class modifyUserById_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public modifyUserById_resultStandardScheme getScheme() {
                return new modifyUserById_resultStandardScheme();
            }
        }

        private static class modifyUserById_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<modifyUserById_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, modifyUserById_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, modifyUserById_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class modifyUserById_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public modifyUserById_resultTupleScheme getScheme() {
                return new modifyUserById_resultTupleScheme();
            }
        }

        private static class modifyUserById_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<modifyUserById_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, modifyUserById_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, modifyUserById_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getTotalDepositCard_args implements org.apache.thrift.TBase<getTotalDepositCard_args, getTotalDepositCard_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTotalDepositCard_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTotalDepositCard_args");

        private static final org.apache.thrift.protocol.TField CUSTOMER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("customerId", org.apache.thrift.protocol.TType.STRING, (short) -1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getTotalDepositCard_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getTotalDepositCard_argsTupleSchemeFactory();

        public String customerId; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            CUSTOMER_ID((short) -1, "customerId");

            private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case -1: // CUSTOMER_ID
                        return CUSTOMER_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.CUSTOMER_ID, new org.apache.thrift.meta_data.FieldMetaData("customerId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTotalDepositCard_args.class, metaDataMap);
        }

        public getTotalDepositCard_args() {
        }

        public getTotalDepositCard_args(
                String customerId) {
            this();
            this.customerId = customerId;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getTotalDepositCard_args(getTotalDepositCard_args other) {
            if (other.isSetCustomerId()) {
                this.customerId = other.customerId;
            }
        }

        public getTotalDepositCard_args deepCopy() {
            return new getTotalDepositCard_args(this);
        }

        @Override
        public void clear() {
            this.customerId = null;
        }

        public String getCustomerId() {
            return this.customerId;
        }

        public getTotalDepositCard_args setCustomerId(String customerId) {
            this.customerId = customerId;
            return this;
        }

        public void unsetCustomerId() {
            this.customerId = null;
        }

        /**
         * Returns true if field customerId is set (has been assigned a value) and false otherwise
         */
        public boolean isSetCustomerId() {
            return this.customerId != null;
        }

        public void setCustomerIdIsSet(boolean value) {
            if (!value) {
                this.customerId = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case CUSTOMER_ID:
                    if (value == null) {
                        unsetCustomerId();
                    } else {
                        setCustomerId((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case CUSTOMER_ID:
                    return getCustomerId();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case CUSTOMER_ID:
                    return isSetCustomerId();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getTotalDepositCard_args)
                return this.equals((getTotalDepositCard_args) that);
            return false;
        }

        public boolean equals(getTotalDepositCard_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_customerId = true && this.isSetCustomerId();
            boolean that_present_customerId = true && that.isSetCustomerId();
            if (this_present_customerId || that_present_customerId) {
                if (!(this_present_customerId && that_present_customerId))
                    return false;
                if (!this.customerId.equals(that.customerId))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetCustomerId()) ? 131071 : 524287);
            if (isSetCustomerId())
                hashCode = hashCode * 8191 + customerId.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getTotalDepositCard_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetCustomerId()).compareTo(other.isSetCustomerId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCustomerId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.customerId, other.customerId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getTotalDepositCard_args(");
            boolean first = true;

            sb.append("customerId:");
            if (this.customerId == null) {
                sb.append("null");
            } else {
                sb.append(this.customerId);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getTotalDepositCard_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getTotalDepositCard_argsStandardScheme getScheme() {
                return new getTotalDepositCard_argsStandardScheme();
            }
        }

        private static class getTotalDepositCard_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getTotalDepositCard_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getTotalDepositCard_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case -1: // CUSTOMER_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.customerId = iprot.readString();
                                struct.setCustomerIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getTotalDepositCard_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.customerId != null) {
                    oprot.writeFieldBegin(CUSTOMER_ID_FIELD_DESC);
                    oprot.writeString(struct.customerId);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getTotalDepositCard_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getTotalDepositCard_argsTupleScheme getScheme() {
                return new getTotalDepositCard_argsTupleScheme();
            }
        }

        private static class getTotalDepositCard_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getTotalDepositCard_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getTotalDepositCard_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetCustomerId()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetCustomerId()) {
                    oprot.writeString(struct.customerId);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getTotalDepositCard_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.customerId = iprot.readString();
                    struct.setCustomerIdIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getTotalDepositCard_result implements org.apache.thrift.TBase<getTotalDepositCard_result, getTotalDepositCard_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTotalDepositCard_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTotalDepositCard_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short) 0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getTotalDepositCard_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getTotalDepositCard_resultTupleSchemeFactory();

        public int success; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __SUCCESS_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTotalDepositCard_result.class, metaDataMap);
        }

        public getTotalDepositCard_result() {
        }

        public getTotalDepositCard_result(
                int success) {
            this();
            this.success = success;
            setSuccessIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getTotalDepositCard_result(getTotalDepositCard_result other) {
            __isset_bitfield = other.__isset_bitfield;
            this.success = other.success;
        }

        public getTotalDepositCard_result deepCopy() {
            return new getTotalDepositCard_result(this);
        }

        @Override
        public void clear() {
            setSuccessIsSet(false);
            this.success = 0;
        }

        public int getSuccess() {
            return this.success;
        }

        public getTotalDepositCard_result setSuccess(int success) {
            this.success = success;
            setSuccessIsSet(true);
            return this;
        }

        public void unsetSuccess() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        public void setSuccessIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((Integer) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getTotalDepositCard_result)
                return this.equals((getTotalDepositCard_result) that);
            return false;
        }

        public boolean equals(getTotalDepositCard_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true;
            boolean that_present_success = true;
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (this.success != that.success)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + success;

            return hashCode;
        }

        @Override
        public int compareTo(getTotalDepositCard_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getTotalDepositCard_result(");
            boolean first = true;

            sb.append("success:");
            sb.append(this.success);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getTotalDepositCard_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getTotalDepositCard_resultStandardScheme getScheme() {
                return new getTotalDepositCard_resultStandardScheme();
            }
        }

        private static class getTotalDepositCard_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getTotalDepositCard_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getTotalDepositCard_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.success = iprot.readI32();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getTotalDepositCard_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.isSetSuccess()) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeI32(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getTotalDepositCard_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getTotalDepositCard_resultTupleScheme getScheme() {
                return new getTotalDepositCard_resultTupleScheme();
            }
        }

        private static class getTotalDepositCard_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getTotalDepositCard_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getTotalDepositCard_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeI32(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getTotalDepositCard_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readI32();
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

}
