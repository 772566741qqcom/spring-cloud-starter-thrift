/**
 * Autogenerated by Thrift Compiler (0.10.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package io.ostenant.rpc.thrift.examples.thrift.entities;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-11-21")
public class ThriftDepositCard implements org.apache.thrift.TBase<ThriftDepositCard, ThriftDepositCard._Fields>, java.io.Serializable, Cloneable, Comparable<ThriftDepositCard> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftDepositCard");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short) 1);
    private static final org.apache.thrift.protocol.TField IS_VIP_FIELD_DESC = new org.apache.thrift.protocol.TField("isVip", org.apache.thrift.protocol.TType.BOOL, (short) 2);
    private static final org.apache.thrift.protocol.TField OPENING_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("openingTime", org.apache.thrift.protocol.TType.STRING, (short) 3);
    private static final org.apache.thrift.protocol.TField ACCOUNT_BALANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("accountBalance", org.apache.thrift.protocol.TType.DOUBLE, (short) 4);
    private static final org.apache.thrift.protocol.TField ACCOUNT_FLOW_FIELD_DESC = new org.apache.thrift.protocol.TField("accountFlow", org.apache.thrift.protocol.TType.DOUBLE, (short) 5);
    private static final org.apache.thrift.protocol.TField BRANCH_FIELD_DESC = new org.apache.thrift.protocol.TField("branch", org.apache.thrift.protocol.TType.STRUCT, (short) 6);
    private static final org.apache.thrift.protocol.TField CUSTOMER_FIELD_DESC = new org.apache.thrift.protocol.TField("customer", org.apache.thrift.protocol.TType.STRUCT, (short) 7);
    private static final org.apache.thrift.protocol.TField DEPOSIT_HISTORY_FIELD_DESC = new org.apache.thrift.protocol.TField("depositHistory", org.apache.thrift.protocol.TType.LIST, (short) 8);
    private static final org.apache.thrift.protocol.TField WITHDRAW_HISTORY_FIELD_DESC = new org.apache.thrift.protocol.TField("WithdrawHistory", org.apache.thrift.protocol.TType.LIST, (short) 9);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ThriftDepositCardStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ThriftDepositCardTupleSchemeFactory();

    public String id; // required
    public boolean isVip; // required
    public String openingTime; // required
    public double accountBalance; // required
    public double accountFlow; // optional
    public ThriftBranch branch; // optional
    public ThriftCustomer customer; // optional
    public java.util.List<ThriftDeposit> depositHistory; // optional
    public java.util.List<ThriftWithdraw> WithdrawHistory; // optional

    /**
     * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        ID((short) 1, "id"),
        IS_VIP((short) 2, "isVip"),
        OPENING_TIME((short) 3, "openingTime"),
        ACCOUNT_BALANCE((short) 4, "accountBalance"),
        ACCOUNT_FLOW((short) 5, "accountFlow"),
        BRANCH((short) 6, "branch"),
        CUSTOMER((short) 7, "customer"),
        DEPOSIT_HISTORY((short) 8, "depositHistory"),
        WITHDRAW_HISTORY((short) 9, "WithdrawHistory");

        private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

        static {
            for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // ID
                    return ID;
                case 2: // IS_VIP
                    return IS_VIP;
                case 3: // OPENING_TIME
                    return OPENING_TIME;
                case 4: // ACCOUNT_BALANCE
                    return ACCOUNT_BALANCE;
                case 5: // ACCOUNT_FLOW
                    return ACCOUNT_FLOW;
                case 6: // BRANCH
                    return BRANCH;
                case 7: // CUSTOMER
                    return CUSTOMER;
                case 8: // DEPOSIT_HISTORY
                    return DEPOSIT_HISTORY;
                case 9: // WITHDRAW_HISTORY
                    return WITHDRAW_HISTORY;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __ISVIP_ISSET_ID = 0;
    private static final int __ACCOUNTBALANCE_ISSET_ID = 1;
    private static final int __ACCOUNTFLOW_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    private static final _Fields optionals[] = {_Fields.ACCOUNT_FLOW, _Fields.BRANCH, _Fields.CUSTOMER, _Fields.DEPOSIT_HISTORY, _Fields.WITHDRAW_HISTORY};
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.IS_VIP, new org.apache.thrift.meta_data.FieldMetaData("isVip", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
        tmpMap.put(_Fields.OPENING_TIME, new org.apache.thrift.meta_data.FieldMetaData("openingTime", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.ACCOUNT_BALANCE, new org.apache.thrift.meta_data.FieldMetaData("accountBalance", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
        tmpMap.put(_Fields.ACCOUNT_FLOW, new org.apache.thrift.meta_data.FieldMetaData("accountFlow", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
        tmpMap.put(_Fields.BRANCH, new org.apache.thrift.meta_data.FieldMetaData("branch", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftBranch.class)));
        tmpMap.put(_Fields.CUSTOMER, new org.apache.thrift.meta_data.FieldMetaData("customer", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftCustomer.class)));
        tmpMap.put(_Fields.DEPOSIT_HISTORY, new org.apache.thrift.meta_data.FieldMetaData("depositHistory", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT, "ThriftDeposit"))));
        tmpMap.put(_Fields.WITHDRAW_HISTORY, new org.apache.thrift.meta_data.FieldMetaData("WithdrawHistory", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT, "ThriftWithdraw"))));
        metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftDepositCard.class, metaDataMap);
    }

    public ThriftDepositCard() {
    }

    public ThriftDepositCard(
            String id,
            boolean isVip,
            String openingTime,
            double accountBalance) {
        this();
        this.id = id;
        this.isVip = isVip;
        setIsVipIsSet(true);
        this.openingTime = openingTime;
        this.accountBalance = accountBalance;
        setAccountBalanceIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ThriftDepositCard(ThriftDepositCard other) {
        __isset_bitfield = other.__isset_bitfield;
        if (other.isSetId()) {
            this.id = other.id;
        }
        this.isVip = other.isVip;
        if (other.isSetOpeningTime()) {
            this.openingTime = other.openingTime;
        }
        this.accountBalance = other.accountBalance;
        this.accountFlow = other.accountFlow;
        if (other.isSetBranch()) {
            this.branch = new ThriftBranch(other.branch);
        }
        if (other.isSetCustomer()) {
            this.customer = new ThriftCustomer(other.customer);
        }
        if (other.isSetDepositHistory()) {
            java.util.List<ThriftDeposit> __this__depositHistory = new java.util.ArrayList<ThriftDeposit>(other.depositHistory.size());
            for (ThriftDeposit other_element : other.depositHistory) {
                __this__depositHistory.add(other_element);
            }
            this.depositHistory = __this__depositHistory;
        }
        if (other.isSetWithdrawHistory()) {
            java.util.List<ThriftWithdraw> __this__WithdrawHistory = new java.util.ArrayList<ThriftWithdraw>(other.WithdrawHistory.size());
            for (ThriftWithdraw other_element : other.WithdrawHistory) {
                __this__WithdrawHistory.add(other_element);
            }
            this.WithdrawHistory = __this__WithdrawHistory;
        }
    }

    public ThriftDepositCard deepCopy() {
        return new ThriftDepositCard(this);
    }

    @Override
    public void clear() {
        this.id = null;
        setIsVipIsSet(false);
        this.isVip = false;
        this.openingTime = null;
        setAccountBalanceIsSet(false);
        this.accountBalance = 0.0;
        setAccountFlowIsSet(false);
        this.accountFlow = 0.0;
        this.branch = null;
        this.customer = null;
        this.depositHistory = null;
        this.WithdrawHistory = null;
    }

    public String getId() {
        return this.id;
    }

    public ThriftDepositCard setId(String id) {
        this.id = id;
        return this;
    }

    public void unsetId() {
        this.id = null;
    }

    /**
     * Returns true if field id is set (has been assigned a value) and false otherwise
     */
    public boolean isSetId() {
        return this.id != null;
    }

    public void setIdIsSet(boolean value) {
        if (!value) {
            this.id = null;
        }
    }

    public boolean isIsVip() {
        return this.isVip;
    }

    public ThriftDepositCard setIsVip(boolean isVip) {
        this.isVip = isVip;
        setIsVipIsSet(true);
        return this;
    }

    public void unsetIsVip() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISVIP_ISSET_ID);
    }

    /**
     * Returns true if field isVip is set (has been assigned a value) and false otherwise
     */
    public boolean isSetIsVip() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISVIP_ISSET_ID);
    }

    public void setIsVipIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISVIP_ISSET_ID, value);
    }

    public String getOpeningTime() {
        return this.openingTime;
    }

    public ThriftDepositCard setOpeningTime(String openingTime) {
        this.openingTime = openingTime;
        return this;
    }

    public void unsetOpeningTime() {
        this.openingTime = null;
    }

    /**
     * Returns true if field openingTime is set (has been assigned a value) and false otherwise
     */
    public boolean isSetOpeningTime() {
        return this.openingTime != null;
    }

    public void setOpeningTimeIsSet(boolean value) {
        if (!value) {
            this.openingTime = null;
        }
    }

    public double getAccountBalance() {
        return this.accountBalance;
    }

    public ThriftDepositCard setAccountBalance(double accountBalance) {
        this.accountBalance = accountBalance;
        setAccountBalanceIsSet(true);
        return this;
    }

    public void unsetAccountBalance() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ACCOUNTBALANCE_ISSET_ID);
    }

    /**
     * Returns true if field accountBalance is set (has been assigned a value) and false otherwise
     */
    public boolean isSetAccountBalance() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ACCOUNTBALANCE_ISSET_ID);
    }

    public void setAccountBalanceIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ACCOUNTBALANCE_ISSET_ID, value);
    }

    public double getAccountFlow() {
        return this.accountFlow;
    }

    public ThriftDepositCard setAccountFlow(double accountFlow) {
        this.accountFlow = accountFlow;
        setAccountFlowIsSet(true);
        return this;
    }

    public void unsetAccountFlow() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ACCOUNTFLOW_ISSET_ID);
    }

    /**
     * Returns true if field accountFlow is set (has been assigned a value) and false otherwise
     */
    public boolean isSetAccountFlow() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ACCOUNTFLOW_ISSET_ID);
    }

    public void setAccountFlowIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ACCOUNTFLOW_ISSET_ID, value);
    }

    public ThriftBranch getBranch() {
        return this.branch;
    }

    public ThriftDepositCard setBranch(ThriftBranch branch) {
        this.branch = branch;
        return this;
    }

    public void unsetBranch() {
        this.branch = null;
    }

    /**
     * Returns true if field branch is set (has been assigned a value) and false otherwise
     */
    public boolean isSetBranch() {
        return this.branch != null;
    }

    public void setBranchIsSet(boolean value) {
        if (!value) {
            this.branch = null;
        }
    }

    public ThriftCustomer getCustomer() {
        return this.customer;
    }

    public ThriftDepositCard setCustomer(ThriftCustomer customer) {
        this.customer = customer;
        return this;
    }

    public void unsetCustomer() {
        this.customer = null;
    }

    /**
     * Returns true if field customer is set (has been assigned a value) and false otherwise
     */
    public boolean isSetCustomer() {
        return this.customer != null;
    }

    public void setCustomerIsSet(boolean value) {
        if (!value) {
            this.customer = null;
        }
    }

    public int getDepositHistorySize() {
        return (this.depositHistory == null) ? 0 : this.depositHistory.size();
    }

    public java.util.Iterator<ThriftDeposit> getDepositHistoryIterator() {
        return (this.depositHistory == null) ? null : this.depositHistory.iterator();
    }

    public void addToDepositHistory(ThriftDeposit elem) {
        if (this.depositHistory == null) {
            this.depositHistory = new java.util.ArrayList<ThriftDeposit>();
        }
        this.depositHistory.add(elem);
    }

    public java.util.List<ThriftDeposit> getDepositHistory() {
        return this.depositHistory;
    }

    public ThriftDepositCard setDepositHistory(java.util.List<ThriftDeposit> depositHistory) {
        this.depositHistory = depositHistory;
        return this;
    }

    public void unsetDepositHistory() {
        this.depositHistory = null;
    }

    /**
     * Returns true if field depositHistory is set (has been assigned a value) and false otherwise
     */
    public boolean isSetDepositHistory() {
        return this.depositHistory != null;
    }

    public void setDepositHistoryIsSet(boolean value) {
        if (!value) {
            this.depositHistory = null;
        }
    }

    public int getWithdrawHistorySize() {
        return (this.WithdrawHistory == null) ? 0 : this.WithdrawHistory.size();
    }

    public java.util.Iterator<ThriftWithdraw> getWithdrawHistoryIterator() {
        return (this.WithdrawHistory == null) ? null : this.WithdrawHistory.iterator();
    }

    public void addToWithdrawHistory(ThriftWithdraw elem) {
        if (this.WithdrawHistory == null) {
            this.WithdrawHistory = new java.util.ArrayList<ThriftWithdraw>();
        }
        this.WithdrawHistory.add(elem);
    }

    public java.util.List<ThriftWithdraw> getWithdrawHistory() {
        return this.WithdrawHistory;
    }

    public ThriftDepositCard setWithdrawHistory(java.util.List<ThriftWithdraw> WithdrawHistory) {
        this.WithdrawHistory = WithdrawHistory;
        return this;
    }

    public void unsetWithdrawHistory() {
        this.WithdrawHistory = null;
    }

    /**
     * Returns true if field WithdrawHistory is set (has been assigned a value) and false otherwise
     */
    public boolean isSetWithdrawHistory() {
        return this.WithdrawHistory != null;
    }

    public void setWithdrawHistoryIsSet(boolean value) {
        if (!value) {
            this.WithdrawHistory = null;
        }
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case ID:
                if (value == null) {
                    unsetId();
                } else {
                    setId((String) value);
                }
                break;

            case IS_VIP:
                if (value == null) {
                    unsetIsVip();
                } else {
                    setIsVip((Boolean) value);
                }
                break;

            case OPENING_TIME:
                if (value == null) {
                    unsetOpeningTime();
                } else {
                    setOpeningTime((String) value);
                }
                break;

            case ACCOUNT_BALANCE:
                if (value == null) {
                    unsetAccountBalance();
                } else {
                    setAccountBalance((Double) value);
                }
                break;

            case ACCOUNT_FLOW:
                if (value == null) {
                    unsetAccountFlow();
                } else {
                    setAccountFlow((Double) value);
                }
                break;

            case BRANCH:
                if (value == null) {
                    unsetBranch();
                } else {
                    setBranch((ThriftBranch) value);
                }
                break;

            case CUSTOMER:
                if (value == null) {
                    unsetCustomer();
                } else {
                    setCustomer((ThriftCustomer) value);
                }
                break;

            case DEPOSIT_HISTORY:
                if (value == null) {
                    unsetDepositHistory();
                } else {
                    setDepositHistory((java.util.List<ThriftDeposit>) value);
                }
                break;

            case WITHDRAW_HISTORY:
                if (value == null) {
                    unsetWithdrawHistory();
                } else {
                    setWithdrawHistory((java.util.List<ThriftWithdraw>) value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
            case ID:
                return getId();

            case IS_VIP:
                return isIsVip();

            case OPENING_TIME:
                return getOpeningTime();

            case ACCOUNT_BALANCE:
                return getAccountBalance();

            case ACCOUNT_FLOW:
                return getAccountFlow();

            case BRANCH:
                return getBranch();

            case CUSTOMER:
                return getCustomer();

            case DEPOSIT_HISTORY:
                return getDepositHistory();

            case WITHDRAW_HISTORY:
                return getWithdrawHistory();

        }
        throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
     */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case ID:
                return isSetId();
            case IS_VIP:
                return isSetIsVip();
            case OPENING_TIME:
                return isSetOpeningTime();
            case ACCOUNT_BALANCE:
                return isSetAccountBalance();
            case ACCOUNT_FLOW:
                return isSetAccountFlow();
            case BRANCH:
                return isSetBranch();
            case CUSTOMER:
                return isSetCustomer();
            case DEPOSIT_HISTORY:
                return isSetDepositHistory();
            case WITHDRAW_HISTORY:
                return isSetWithdrawHistory();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof ThriftDepositCard)
            return this.equals((ThriftDepositCard) that);
        return false;
    }

    public boolean equals(ThriftDepositCard that) {
        if (that == null)
            return false;
        if (this == that)
            return true;

        boolean this_present_id = true && this.isSetId();
        boolean that_present_id = true && that.isSetId();
        if (this_present_id || that_present_id) {
            if (!(this_present_id && that_present_id))
                return false;
            if (!this.id.equals(that.id))
                return false;
        }

        boolean this_present_isVip = true;
        boolean that_present_isVip = true;
        if (this_present_isVip || that_present_isVip) {
            if (!(this_present_isVip && that_present_isVip))
                return false;
            if (this.isVip != that.isVip)
                return false;
        }

        boolean this_present_openingTime = true && this.isSetOpeningTime();
        boolean that_present_openingTime = true && that.isSetOpeningTime();
        if (this_present_openingTime || that_present_openingTime) {
            if (!(this_present_openingTime && that_present_openingTime))
                return false;
            if (!this.openingTime.equals(that.openingTime))
                return false;
        }

        boolean this_present_accountBalance = true;
        boolean that_present_accountBalance = true;
        if (this_present_accountBalance || that_present_accountBalance) {
            if (!(this_present_accountBalance && that_present_accountBalance))
                return false;
            if (this.accountBalance != that.accountBalance)
                return false;
        }

        boolean this_present_accountFlow = true && this.isSetAccountFlow();
        boolean that_present_accountFlow = true && that.isSetAccountFlow();
        if (this_present_accountFlow || that_present_accountFlow) {
            if (!(this_present_accountFlow && that_present_accountFlow))
                return false;
            if (this.accountFlow != that.accountFlow)
                return false;
        }

        boolean this_present_branch = true && this.isSetBranch();
        boolean that_present_branch = true && that.isSetBranch();
        if (this_present_branch || that_present_branch) {
            if (!(this_present_branch && that_present_branch))
                return false;
            if (!this.branch.equals(that.branch))
                return false;
        }

        boolean this_present_customer = true && this.isSetCustomer();
        boolean that_present_customer = true && that.isSetCustomer();
        if (this_present_customer || that_present_customer) {
            if (!(this_present_customer && that_present_customer))
                return false;
            if (!this.customer.equals(that.customer))
                return false;
        }

        boolean this_present_depositHistory = true && this.isSetDepositHistory();
        boolean that_present_depositHistory = true && that.isSetDepositHistory();
        if (this_present_depositHistory || that_present_depositHistory) {
            if (!(this_present_depositHistory && that_present_depositHistory))
                return false;
            if (!this.depositHistory.equals(that.depositHistory))
                return false;
        }

        boolean this_present_WithdrawHistory = true && this.isSetWithdrawHistory();
        boolean that_present_WithdrawHistory = true && that.isSetWithdrawHistory();
        if (this_present_WithdrawHistory || that_present_WithdrawHistory) {
            if (!(this_present_WithdrawHistory && that_present_WithdrawHistory))
                return false;
            if (!this.WithdrawHistory.equals(that.WithdrawHistory))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        int hashCode = 1;

        hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
        if (isSetId())
            hashCode = hashCode * 8191 + id.hashCode();

        hashCode = hashCode * 8191 + ((isVip) ? 131071 : 524287);

        hashCode = hashCode * 8191 + ((isSetOpeningTime()) ? 131071 : 524287);
        if (isSetOpeningTime())
            hashCode = hashCode * 8191 + openingTime.hashCode();

        hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(accountBalance);

        hashCode = hashCode * 8191 + ((isSetAccountFlow()) ? 131071 : 524287);
        if (isSetAccountFlow())
            hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(accountFlow);

        hashCode = hashCode * 8191 + ((isSetBranch()) ? 131071 : 524287);
        if (isSetBranch())
            hashCode = hashCode * 8191 + branch.hashCode();

        hashCode = hashCode * 8191 + ((isSetCustomer()) ? 131071 : 524287);
        if (isSetCustomer())
            hashCode = hashCode * 8191 + customer.hashCode();

        hashCode = hashCode * 8191 + ((isSetDepositHistory()) ? 131071 : 524287);
        if (isSetDepositHistory())
            hashCode = hashCode * 8191 + depositHistory.hashCode();

        hashCode = hashCode * 8191 + ((isSetWithdrawHistory()) ? 131071 : 524287);
        if (isSetWithdrawHistory())
            hashCode = hashCode * 8191 + WithdrawHistory.hashCode();

        return hashCode;
    }

    @Override
    public int compareTo(ThriftDepositCard other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetId()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetIsVip()).compareTo(other.isSetIsVip());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetIsVip()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isVip, other.isVip);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetOpeningTime()).compareTo(other.isSetOpeningTime());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetOpeningTime()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.openingTime, other.openingTime);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetAccountBalance()).compareTo(other.isSetAccountBalance());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetAccountBalance()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountBalance, other.accountBalance);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetAccountFlow()).compareTo(other.isSetAccountFlow());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetAccountFlow()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountFlow, other.accountFlow);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetBranch()).compareTo(other.isSetBranch());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetBranch()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.branch, other.branch);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetCustomer()).compareTo(other.isSetCustomer());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetCustomer()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.customer, other.customer);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetDepositHistory()).compareTo(other.isSetDepositHistory());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetDepositHistory()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.depositHistory, other.depositHistory);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetWithdrawHistory()).compareTo(other.isSetWithdrawHistory());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetWithdrawHistory()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.WithdrawHistory, other.WithdrawHistory);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("ThriftDepositCard(");
        boolean first = true;

        sb.append("id:");
        if (this.id == null) {
            sb.append("null");
        } else {
            sb.append(this.id);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("isVip:");
        sb.append(this.isVip);
        first = false;
        if (!first) sb.append(", ");
        sb.append("openingTime:");
        if (this.openingTime == null) {
            sb.append("null");
        } else {
            sb.append(this.openingTime);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("accountBalance:");
        sb.append(this.accountBalance);
        first = false;
        if (isSetAccountFlow()) {
            if (!first) sb.append(", ");
            sb.append("accountFlow:");
            sb.append(this.accountFlow);
            first = false;
        }
        if (isSetBranch()) {
            if (!first) sb.append(", ");
            sb.append("branch:");
            if (this.branch == null) {
                sb.append("null");
            } else {
                sb.append(this.branch);
            }
            first = false;
        }
        if (isSetCustomer()) {
            if (!first) sb.append(", ");
            sb.append("customer:");
            if (this.customer == null) {
                sb.append("null");
            } else {
                sb.append(this.customer);
            }
            first = false;
        }
        if (isSetDepositHistory()) {
            if (!first) sb.append(", ");
            sb.append("depositHistory:");
            if (this.depositHistory == null) {
                sb.append("null");
            } else {
                sb.append(this.depositHistory);
            }
            first = false;
        }
        if (isSetWithdrawHistory()) {
            if (!first) sb.append(", ");
            sb.append("WithdrawHistory:");
            if (this.WithdrawHistory == null) {
                sb.append("null");
            } else {
                sb.append(this.WithdrawHistory);
            }
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        if (id == null) {
            throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' was not present! Struct: " + toString());
        }
        // alas, we cannot check 'isVip' because it's a primitive and you chose the non-beans generator.
        if (openingTime == null) {
            throw new org.apache.thrift.protocol.TProtocolException("Required field 'openingTime' was not present! Struct: " + toString());
        }
        // alas, we cannot check 'accountBalance' because it's a primitive and you chose the non-beans generator.
        // check for sub-struct validity
        if (branch != null) {
            branch.validate();
        }
        if (customer != null) {
            customer.validate();
        }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class ThriftDepositCardStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public ThriftDepositCardStandardScheme getScheme() {
            return new ThriftDepositCardStandardScheme();
        }
    }

    private static class ThriftDepositCardStandardScheme extends org.apache.thrift.scheme.StandardScheme<ThriftDepositCard> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, ThriftDepositCard struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.id = iprot.readString();
                            struct.setIdIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // IS_VIP
                        if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                            struct.isVip = iprot.readBool();
                            struct.setIsVipIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // OPENING_TIME
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.openingTime = iprot.readString();
                            struct.setOpeningTimeIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // ACCOUNT_BALANCE
                        if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                            struct.accountBalance = iprot.readDouble();
                            struct.setAccountBalanceIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 5: // ACCOUNT_FLOW
                        if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                            struct.accountFlow = iprot.readDouble();
                            struct.setAccountFlowIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 6: // BRANCH
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.branch = new ThriftBranch();
                            struct.branch.read(iprot);
                            struct.setBranchIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 7: // CUSTOMER
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.customer = new ThriftCustomer();
                            struct.customer.read(iprot);
                            struct.setCustomerIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 8: // DEPOSIT_HISTORY
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list34 = iprot.readListBegin();
                                struct.depositHistory = new java.util.ArrayList<ThriftDeposit>(_list34.size);
                                ThriftDeposit _elem35;
                                for (int _i36 = 0; _i36 < _list34.size; ++_i36) {
                                    _elem35 = new ThriftDeposit();
                                    _elem35.read(iprot);
                                    struct.depositHistory.add(_elem35);
                                }
                                iprot.readListEnd();
                            }
                            struct.setDepositHistoryIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 9: // WITHDRAW_HISTORY
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list37 = iprot.readListBegin();
                                struct.WithdrawHistory = new java.util.ArrayList<ThriftWithdraw>(_list37.size);
                                ThriftWithdraw _elem38;
                                for (int _i39 = 0; _i39 < _list37.size; ++_i39) {
                                    _elem38 = new ThriftWithdraw();
                                    _elem38.read(iprot);
                                    struct.WithdrawHistory.add(_elem38);
                                }
                                iprot.readListEnd();
                            }
                            struct.setWithdrawHistoryIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            if (!struct.isSetIsVip()) {
                throw new org.apache.thrift.protocol.TProtocolException("Required field 'isVip' was not found in serialized data! Struct: " + toString());
            }
            if (!struct.isSetAccountBalance()) {
                throw new org.apache.thrift.protocol.TProtocolException("Required field 'accountBalance' was not found in serialized data! Struct: " + toString());
            }
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, ThriftDepositCard struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.id != null) {
                oprot.writeFieldBegin(ID_FIELD_DESC);
                oprot.writeString(struct.id);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldBegin(IS_VIP_FIELD_DESC);
            oprot.writeBool(struct.isVip);
            oprot.writeFieldEnd();
            if (struct.openingTime != null) {
                oprot.writeFieldBegin(OPENING_TIME_FIELD_DESC);
                oprot.writeString(struct.openingTime);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldBegin(ACCOUNT_BALANCE_FIELD_DESC);
            oprot.writeDouble(struct.accountBalance);
            oprot.writeFieldEnd();
            if (struct.isSetAccountFlow()) {
                oprot.writeFieldBegin(ACCOUNT_FLOW_FIELD_DESC);
                oprot.writeDouble(struct.accountFlow);
                oprot.writeFieldEnd();
            }
            if (struct.branch != null) {
                if (struct.isSetBranch()) {
                    oprot.writeFieldBegin(BRANCH_FIELD_DESC);
                    struct.branch.write(oprot);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.customer != null) {
                if (struct.isSetCustomer()) {
                    oprot.writeFieldBegin(CUSTOMER_FIELD_DESC);
                    struct.customer.write(oprot);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.depositHistory != null) {
                if (struct.isSetDepositHistory()) {
                    oprot.writeFieldBegin(DEPOSIT_HISTORY_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.depositHistory.size()));
                        for (ThriftDeposit _iter40 : struct.depositHistory) {
                            _iter40.write(oprot);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            if (struct.WithdrawHistory != null) {
                if (struct.isSetWithdrawHistory()) {
                    oprot.writeFieldBegin(WITHDRAW_HISTORY_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.WithdrawHistory.size()));
                        for (ThriftWithdraw _iter41 : struct.WithdrawHistory) {
                            _iter41.write(oprot);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class ThriftDepositCardTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public ThriftDepositCardTupleScheme getScheme() {
            return new ThriftDepositCardTupleScheme();
        }
    }

    private static class ThriftDepositCardTupleScheme extends org.apache.thrift.scheme.TupleScheme<ThriftDepositCard> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, ThriftDepositCard struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            oprot.writeString(struct.id);
            oprot.writeBool(struct.isVip);
            oprot.writeString(struct.openingTime);
            oprot.writeDouble(struct.accountBalance);
            java.util.BitSet optionals = new java.util.BitSet();
            if (struct.isSetAccountFlow()) {
                optionals.set(0);
            }
            if (struct.isSetBranch()) {
                optionals.set(1);
            }
            if (struct.isSetCustomer()) {
                optionals.set(2);
            }
            if (struct.isSetDepositHistory()) {
                optionals.set(3);
            }
            if (struct.isSetWithdrawHistory()) {
                optionals.set(4);
            }
            oprot.writeBitSet(optionals, 5);
            if (struct.isSetAccountFlow()) {
                oprot.writeDouble(struct.accountFlow);
            }
            if (struct.isSetBranch()) {
                struct.branch.write(oprot);
            }
            if (struct.isSetCustomer()) {
                struct.customer.write(oprot);
            }
            if (struct.isSetDepositHistory()) {
                {
                    oprot.writeI32(struct.depositHistory.size());
                    for (ThriftDeposit _iter42 : struct.depositHistory) {
                        _iter42.write(oprot);
                    }
                }
            }
            if (struct.isSetWithdrawHistory()) {
                {
                    oprot.writeI32(struct.WithdrawHistory.size());
                    for (ThriftWithdraw _iter43 : struct.WithdrawHistory) {
                        _iter43.write(oprot);
                    }
                }
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, ThriftDepositCard struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            struct.id = iprot.readString();
            struct.setIdIsSet(true);
            struct.isVip = iprot.readBool();
            struct.setIsVipIsSet(true);
            struct.openingTime = iprot.readString();
            struct.setOpeningTimeIsSet(true);
            struct.accountBalance = iprot.readDouble();
            struct.setAccountBalanceIsSet(true);
            java.util.BitSet incoming = iprot.readBitSet(5);
            if (incoming.get(0)) {
                struct.accountFlow = iprot.readDouble();
                struct.setAccountFlowIsSet(true);
            }
            if (incoming.get(1)) {
                struct.branch = new ThriftBranch();
                struct.branch.read(iprot);
                struct.setBranchIsSet(true);
            }
            if (incoming.get(2)) {
                struct.customer = new ThriftCustomer();
                struct.customer.read(iprot);
                struct.setCustomerIsSet(true);
            }
            if (incoming.get(3)) {
                {
                    org.apache.thrift.protocol.TList _list44 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                    struct.depositHistory = new java.util.ArrayList<ThriftDeposit>(_list44.size);
                    ThriftDeposit _elem45;
                    for (int _i46 = 0; _i46 < _list44.size; ++_i46) {
                        _elem45 = new ThriftDeposit();
                        _elem45.read(iprot);
                        struct.depositHistory.add(_elem45);
                    }
                }
                struct.setDepositHistoryIsSet(true);
            }
            if (incoming.get(4)) {
                {
                    org.apache.thrift.protocol.TList _list47 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                    struct.WithdrawHistory = new java.util.ArrayList<ThriftWithdraw>(_list47.size);
                    ThriftWithdraw _elem48;
                    for (int _i49 = 0; _i49 < _list47.size; ++_i49) {
                        _elem48 = new ThriftWithdraw();
                        _elem48.read(iprot);
                        struct.WithdrawHistory.add(_elem48);
                    }
                }
                struct.setWithdrawHistoryIsSet(true);
            }
        }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
        return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
}

